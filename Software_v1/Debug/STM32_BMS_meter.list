
STM32_BMS_meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000218c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080022c8  080022c8  000122c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022ec  080022ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080022ec  080022ec  000122ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080022f4  080022f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022f4  080022f4  000122f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022f8  080022f8  000122f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080022fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  2000000c  08002308  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  08002308  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b546  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c6c  00000000  00000000  0002b57b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  0002d1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  0002dca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013284  00000000  00000000  0002e6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b524  00000000  00000000  00041944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007753a  00000000  00000000  0004ce68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c43a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ca0  00000000  00000000  000c43f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	080022b0 	.word	0x080022b0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	080022b0 	.word	0x080022b0

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000478:	f000 faed 	bl	8000a56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047c:	f000 f80c 	bl	8000498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000480:	f000 f912 	bl	80006a8 <MX_GPIO_Init>
  MX_DAC_Init();
 8000484:	f000 f85a 	bl	800053c <MX_DAC_Init>
  MX_SPI1_Init();
 8000488:	f000 f88c 	bl	80005a4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800048c:	f000 f8c0 	bl	8000610 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000490:	f000 f8e8 	bl	8000664 <MX_USB_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000494:	e7fe      	b.n	8000494 <main+0x20>
	...

08000498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b092      	sub	sp, #72	; 0x48
 800049c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049e:	f107 0314 	add.w	r3, r7, #20
 80004a2:	2234      	movs	r2, #52	; 0x34
 80004a4:	2100      	movs	r1, #0
 80004a6:	4618      	mov	r0, r3
 80004a8:	f001 fefa 	bl	80022a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ac:	463b      	mov	r3, r7
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
 80004b6:	60da      	str	r2, [r3, #12]
 80004b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004ba:	4b1f      	ldr	r3, [pc, #124]	; (8000538 <SystemClock_Config+0xa0>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80004c2:	4a1d      	ldr	r2, [pc, #116]	; (8000538 <SystemClock_Config+0xa0>)
 80004c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004c8:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004ca:	2301      	movs	r3, #1
 80004cc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004ce:	2301      	movs	r3, #1
 80004d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004d2:	2302      	movs	r3, #2
 80004d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80004e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80004e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80004e6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e8:	f107 0314 	add.w	r3, r7, #20
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 fed3 	bl	8001298 <HAL_RCC_OscConfig>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <SystemClock_Config+0x64>
  {
    Error_Handler();
 80004f8:	f000 f938 	bl	800076c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004fc:	230f      	movs	r3, #15
 80004fe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000500:	2302      	movs	r3, #2
 8000502:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000504:	2300      	movs	r3, #0
 8000506:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000508:	2300      	movs	r3, #0
 800050a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800050c:	2300      	movs	r3, #0
 800050e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000510:	463b      	mov	r3, r7
 8000512:	2100      	movs	r1, #0
 8000514:	4618      	mov	r0, r3
 8000516:	f001 f9ef 	bl	80018f8 <HAL_RCC_ClockConfig>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000520:	f000 f924 	bl	800076c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8000524:	2200      	movs	r2, #0
 8000526:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800052a:	2000      	movs	r0, #0
 800052c:	f001 fb18 	bl	8001b60 <HAL_RCC_MCOConfig>
}
 8000530:	bf00      	nop
 8000532:	3748      	adds	r7, #72	; 0x48
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40007000 	.word	0x40007000

0800053c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000542:	463b      	mov	r3, r7
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <MX_DAC_Init+0x60>)
 800054c:	4a14      	ldr	r2, [pc, #80]	; (80005a0 <MX_DAC_Init+0x64>)
 800054e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000550:	4812      	ldr	r0, [pc, #72]	; (800059c <MX_DAC_Init+0x60>)
 8000552:	f000 fbd2 	bl	8000cfa <HAL_DAC_Init>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800055c:	f000 f906 	bl	800076c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000560:	2300      	movs	r3, #0
 8000562:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000568:	463b      	mov	r3, r7
 800056a:	2200      	movs	r2, #0
 800056c:	4619      	mov	r1, r3
 800056e:	480b      	ldr	r0, [pc, #44]	; (800059c <MX_DAC_Init+0x60>)
 8000570:	f000 fbe5 	bl	8000d3e <HAL_DAC_ConfigChannel>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800057a:	f000 f8f7 	bl	800076c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800057e:	463b      	mov	r3, r7
 8000580:	2210      	movs	r2, #16
 8000582:	4619      	mov	r1, r3
 8000584:	4805      	ldr	r0, [pc, #20]	; (800059c <MX_DAC_Init+0x60>)
 8000586:	f000 fbda 	bl	8000d3e <HAL_DAC_ConfigChannel>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000590:	f000 f8ec 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	2000006c 	.word	0x2000006c
 80005a0:	40007400 	.word	0x40007400

080005a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005a8:	4b17      	ldr	r3, [pc, #92]	; (8000608 <MX_SPI1_Init+0x64>)
 80005aa:	4a18      	ldr	r2, [pc, #96]	; (800060c <MX_SPI1_Init+0x68>)
 80005ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005ae:	4b16      	ldr	r3, [pc, #88]	; (8000608 <MX_SPI1_Init+0x64>)
 80005b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005b6:	4b14      	ldr	r3, [pc, #80]	; (8000608 <MX_SPI1_Init+0x64>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <MX_SPI1_Init+0x64>)
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_SPI1_Init+0x64>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <MX_SPI1_Init+0x64>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <MX_SPI1_Init+0x64>)
 80005d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80005d6:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <MX_SPI1_Init+0x64>)
 80005d8:	2200      	movs	r2, #0
 80005da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005dc:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <MX_SPI1_Init+0x64>)
 80005de:	2200      	movs	r2, #0
 80005e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005e2:	4b09      	ldr	r3, [pc, #36]	; (8000608 <MX_SPI1_Init+0x64>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005e8:	4b07      	ldr	r3, [pc, #28]	; (8000608 <MX_SPI1_Init+0x64>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80005ee:	4b06      	ldr	r3, [pc, #24]	; (8000608 <MX_SPI1_Init+0x64>)
 80005f0:	220a      	movs	r2, #10
 80005f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005f4:	4804      	ldr	r0, [pc, #16]	; (8000608 <MX_SPI1_Init+0x64>)
 80005f6:	f001 fc47 	bl	8001e88 <HAL_SPI_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000600:	f000 f8b4 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000084 	.word	0x20000084
 800060c:	40013000 	.word	0x40013000

08000610 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_USART1_UART_Init+0x4c>)
 8000616:	4a12      	ldr	r2, [pc, #72]	; (8000660 <MX_USART1_UART_Init+0x50>)
 8000618:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <MX_USART1_UART_Init+0x4c>)
 800061c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000620:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MX_USART1_UART_Init+0x4c>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <MX_USART1_UART_Init+0x4c>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <MX_USART1_UART_Init+0x4c>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_USART1_UART_Init+0x4c>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <MX_USART1_UART_Init+0x4c>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_USART1_UART_Init+0x4c>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <MX_USART1_UART_Init+0x4c>)
 8000648:	f001 fc9a 	bl	8001f80 <HAL_UART_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000652:	f000 f88b 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000028 	.word	0x20000028
 8000660:	40013800 	.word	0x40013800

08000664 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000668:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <MX_USB_PCD_Init+0x3c>)
 800066a:	4a0e      	ldr	r2, [pc, #56]	; (80006a4 <MX_USB_PCD_Init+0x40>)
 800066c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <MX_USB_PCD_Init+0x3c>)
 8000670:	2208      	movs	r2, #8
 8000672:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <MX_USB_PCD_Init+0x3c>)
 8000676:	2202      	movs	r2, #2
 8000678:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_USB_PCD_Init+0x3c>)
 800067c:	2202      	movs	r2, #2
 800067e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <MX_USB_PCD_Init+0x3c>)
 8000682:	2200      	movs	r2, #0
 8000684:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_USB_PCD_Init+0x3c>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800068c:	4804      	ldr	r0, [pc, #16]	; (80006a0 <MX_USB_PCD_Init+0x3c>)
 800068e:	f000 fd25 	bl	80010dc <HAL_PCD_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000698:	f000 f868 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	200000dc 	.word	0x200000dc
 80006a4:	40005c00 	.word	0x40005c00

080006a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	; 0x28
 80006ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	4b28      	ldr	r3, [pc, #160]	; (8000760 <MX_GPIO_Init+0xb8>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	4a27      	ldr	r2, [pc, #156]	; (8000760 <MX_GPIO_Init+0xb8>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	61d3      	str	r3, [r2, #28]
 80006ca:	4b25      	ldr	r3, [pc, #148]	; (8000760 <MX_GPIO_Init+0xb8>)
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d6:	4b22      	ldr	r3, [pc, #136]	; (8000760 <MX_GPIO_Init+0xb8>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	4a21      	ldr	r2, [pc, #132]	; (8000760 <MX_GPIO_Init+0xb8>)
 80006dc:	f043 0320 	orr.w	r3, r3, #32
 80006e0:	61d3      	str	r3, [r2, #28]
 80006e2:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <MX_GPIO_Init+0xb8>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	f003 0320 	and.w	r3, r3, #32
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <MX_GPIO_Init+0xb8>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	4a1b      	ldr	r2, [pc, #108]	; (8000760 <MX_GPIO_Init+0xb8>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	61d3      	str	r3, [r2, #28]
 80006fa:	4b19      	ldr	r3, [pc, #100]	; (8000760 <MX_GPIO_Init+0xb8>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_GPIO_Init+0xb8>)
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	4a15      	ldr	r2, [pc, #84]	; (8000760 <MX_GPIO_Init+0xb8>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	61d3      	str	r3, [r2, #28]
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <MX_GPIO_Init+0xb8>)
 8000714:	69db      	ldr	r3, [r3, #28]
 8000716:	f003 0302 	and.w	r3, r3, #2
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800071e:	2301      	movs	r3, #1
 8000720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000722:	2303      	movs	r3, #3
 8000724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4619      	mov	r1, r3
 8000730:	480c      	ldr	r0, [pc, #48]	; (8000764 <MX_GPIO_Init+0xbc>)
 8000732:	f000 fb53 	bl	8000ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000736:	f44f 7380 	mov.w	r3, #256	; 0x100
 800073a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073c:	2302      	movs	r3, #2
 800073e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	2300      	movs	r3, #0
 8000746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000748:	2300      	movs	r3, #0
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	4619      	mov	r1, r3
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_GPIO_Init+0xc0>)
 8000754:	f000 fb42 	bl	8000ddc <HAL_GPIO_Init>

}
 8000758:	bf00      	nop
 800075a:	3728      	adds	r7, #40	; 0x28
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800
 8000764:	40020400 	.word	0x40020400
 8000768:	40020000 	.word	0x40020000

0800076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000774:	e7fe      	b.n	8000774 <Error_Handler+0x8>
	...

08000778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800077e:	4b17      	ldr	r3, [pc, #92]	; (80007dc <HAL_MspInit+0x64>)
 8000780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000782:	4a16      	ldr	r2, [pc, #88]	; (80007dc <HAL_MspInit+0x64>)
 8000784:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000788:	6253      	str	r3, [r2, #36]	; 0x24
 800078a:	4b14      	ldr	r3, [pc, #80]	; (80007dc <HAL_MspInit+0x64>)
 800078c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800078e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <HAL_MspInit+0x64>)
 8000798:	6a1b      	ldr	r3, [r3, #32]
 800079a:	4a10      	ldr	r2, [pc, #64]	; (80007dc <HAL_MspInit+0x64>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6213      	str	r3, [r2, #32]
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <HAL_MspInit+0x64>)
 80007a4:	6a1b      	ldr	r3, [r3, #32]
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <HAL_MspInit+0x64>)
 80007b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007b2:	4a0a      	ldr	r2, [pc, #40]	; (80007dc <HAL_MspInit+0x64>)
 80007b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b8:	6253      	str	r3, [r2, #36]	; 0x24
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <HAL_MspInit+0x64>)
 80007bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enables the output of internal reference voltage
  */
  __HAL_SYSCFG_VREFINT_OUT_ENABLE();
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <HAL_MspInit+0x68>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a05      	ldr	r2, [pc, #20]	; (80007e0 <HAL_MspInit+0x68>)
 80007cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007d0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40007c00 	.word	0x40007c00

080007e4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a15      	ldr	r2, [pc, #84]	; (8000858 <HAL_DAC_MspInit+0x74>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d123      	bne.n	800084e <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <HAL_DAC_MspInit+0x78>)
 8000808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800080a:	4a14      	ldr	r2, [pc, #80]	; (800085c <HAL_DAC_MspInit+0x78>)
 800080c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000810:	6253      	str	r3, [r2, #36]	; 0x24
 8000812:	4b12      	ldr	r3, [pc, #72]	; (800085c <HAL_DAC_MspInit+0x78>)
 8000814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000816:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <HAL_DAC_MspInit+0x78>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	4a0e      	ldr	r2, [pc, #56]	; (800085c <HAL_DAC_MspInit+0x78>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	61d3      	str	r3, [r2, #28]
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <HAL_DAC_MspInit+0x78>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000836:	2330      	movs	r3, #48	; 0x30
 8000838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800083a:	2303      	movs	r3, #3
 800083c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	4805      	ldr	r0, [pc, #20]	; (8000860 <HAL_DAC_MspInit+0x7c>)
 800084a:	f000 fac7 	bl	8000ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800084e:	bf00      	nop
 8000850:	3728      	adds	r7, #40	; 0x28
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40007400 	.word	0x40007400
 800085c:	40023800 	.word	0x40023800
 8000860:	40020000 	.word	0x40020000

08000864 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a17      	ldr	r2, [pc, #92]	; (80008e0 <HAL_SPI_MspInit+0x7c>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d127      	bne.n	80008d6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000886:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <HAL_SPI_MspInit+0x80>)
 8000888:	6a1b      	ldr	r3, [r3, #32]
 800088a:	4a16      	ldr	r2, [pc, #88]	; (80008e4 <HAL_SPI_MspInit+0x80>)
 800088c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000890:	6213      	str	r3, [r2, #32]
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <HAL_SPI_MspInit+0x80>)
 8000894:	6a1b      	ldr	r3, [r3, #32]
 8000896:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <HAL_SPI_MspInit+0x80>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	4a10      	ldr	r2, [pc, #64]	; (80008e4 <HAL_SPI_MspInit+0x80>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	61d3      	str	r3, [r2, #28]
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <HAL_SPI_MspInit+0x80>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80008b6:	2338      	movs	r3, #56	; 0x38
 80008b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c2:	2303      	movs	r3, #3
 80008c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008c6:	2305      	movs	r3, #5
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	4805      	ldr	r0, [pc, #20]	; (80008e8 <HAL_SPI_MspInit+0x84>)
 80008d2:	f000 fa83 	bl	8000ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008d6:	bf00      	nop
 80008d8:	3728      	adds	r7, #40	; 0x28
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40013000 	.word	0x40013000
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40020400 	.word	0x40020400

080008ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a17      	ldr	r2, [pc, #92]	; (8000968 <HAL_UART_MspInit+0x7c>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d128      	bne.n	8000960 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800090e:	4b17      	ldr	r3, [pc, #92]	; (800096c <HAL_UART_MspInit+0x80>)
 8000910:	6a1b      	ldr	r3, [r3, #32]
 8000912:	4a16      	ldr	r2, [pc, #88]	; (800096c <HAL_UART_MspInit+0x80>)
 8000914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000918:	6213      	str	r3, [r2, #32]
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <HAL_UART_MspInit+0x80>)
 800091c:	6a1b      	ldr	r3, [r3, #32]
 800091e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <HAL_UART_MspInit+0x80>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	4a10      	ldr	r2, [pc, #64]	; (800096c <HAL_UART_MspInit+0x80>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	61d3      	str	r3, [r2, #28]
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <HAL_UART_MspInit+0x80>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800093e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000950:	2307      	movs	r3, #7
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	4619      	mov	r1, r3
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <HAL_UART_MspInit+0x84>)
 800095c:	f000 fa3e 	bl	8000ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000960:	bf00      	nop
 8000962:	3728      	adds	r7, #40	; 0x28
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40013800 	.word	0x40013800
 800096c:	40023800 	.word	0x40023800
 8000970:	40020000 	.word	0x40020000

08000974 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a09      	ldr	r2, [pc, #36]	; (80009a8 <HAL_PCD_MspInit+0x34>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d10b      	bne.n	800099e <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <HAL_PCD_MspInit+0x38>)
 8000988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800098a:	4a08      	ldr	r2, [pc, #32]	; (80009ac <HAL_PCD_MspInit+0x38>)
 800098c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000990:	6253      	str	r3, [r2, #36]	; 0x24
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_PCD_MspInit+0x38>)
 8000994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000996:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800099e:	bf00      	nop
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	40005c00 	.word	0x40005c00
 80009ac:	40023800 	.word	0x40023800

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <NMI_Handler+0x4>

080009b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <MemManage_Handler+0x4>

080009c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <BusFault_Handler+0x4>

080009c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <UsageFault_Handler+0x4>

080009ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr

080009da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr

080009e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr

080009f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f6:	f000 f881 	bl	8000afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}

080009fe <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
	...

08000a0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a0c:	480c      	ldr	r0, [pc, #48]	; (8000a40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a0e:	490d      	ldr	r1, [pc, #52]	; (8000a44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a10:	4a0d      	ldr	r2, [pc, #52]	; (8000a48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a14:	e002      	b.n	8000a1c <LoopCopyDataInit>

08000a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1a:	3304      	adds	r3, #4

08000a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a20:	d3f9      	bcc.n	8000a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a24:	4c0a      	ldr	r4, [pc, #40]	; (8000a50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a28:	e001      	b.n	8000a2e <LoopFillZerobss>

08000a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a2c:	3204      	adds	r2, #4

08000a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a30:	d3fb      	bcc.n	8000a2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a32:	f7ff ffe4 	bl	80009fe <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a36:	f001 fc0f 	bl	8002258 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a3a:	f7ff fd1b 	bl	8000474 <main>
  bx lr
 8000a3e:	4770      	bx	lr
  ldr r0, =_sdata
 8000a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a48:	080022fc 	.word	0x080022fc
  ldr r2, =_sbss
 8000a4c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a50:	200003cc 	.word	0x200003cc

08000a54 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC1_IRQHandler>

08000a56 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f000 f917 	bl	8000c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a66:	200f      	movs	r0, #15
 8000a68:	f000 f80e 	bl	8000a88 <HAL_InitTick>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d002      	beq.n	8000a78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	71fb      	strb	r3, [r7, #7]
 8000a76:	e001      	b.n	8000a7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a78:	f7ff fe7e 	bl	8000778 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a90:	2300      	movs	r3, #0
 8000a92:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a94:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <HAL_InitTick+0x68>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d022      	beq.n	8000ae2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a9c:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_InitTick+0x6c>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <HAL_InitTick+0x68>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000aa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f000 f916 	bl	8000ce2 <HAL_SYSTICK_Config>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d10f      	bne.n	8000adc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b0f      	cmp	r3, #15
 8000ac0:	d809      	bhi.n	8000ad6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	6879      	ldr	r1, [r7, #4]
 8000ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8000aca:	f000 f8ee 	bl	8000caa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ace:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <HAL_InitTick+0x70>)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6013      	str	r3, [r2, #0]
 8000ad4:	e007      	b.n	8000ae6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	73fb      	strb	r3, [r7, #15]
 8000ada:	e004      	b.n	8000ae6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	73fb      	strb	r3, [r7, #15]
 8000ae0:	e001      	b.n	8000ae6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000008 	.word	0x20000008
 8000af4:	20000000 	.word	0x20000000
 8000af8:	20000004 	.word	0x20000004

08000afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <HAL_IncTick+0x1c>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <HAL_IncTick+0x20>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4413      	add	r3, r2
 8000b0a:	4a03      	ldr	r2, [pc, #12]	; (8000b18 <HAL_IncTick+0x1c>)
 8000b0c:	6013      	str	r3, [r2, #0]
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	200003c8 	.word	0x200003c8
 8000b1c:	20000008 	.word	0x20000008

08000b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;
 8000b24:	4b02      	ldr	r3, [pc, #8]	; (8000b30 <HAL_GetTick+0x10>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	200003c8 	.word	0x200003c8

08000b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b50:	4013      	ands	r3, r2
 8000b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b66:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	60d3      	str	r3, [r2, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <__NVIC_GetPriorityGrouping+0x18>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	f003 0307 	and.w	r3, r3, #7
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	; (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	; (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	; 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	; 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c60:	d301      	bcc.n	8000c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00f      	b.n	8000c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <SysTick_Config+0x40>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c6e:	210f      	movs	r1, #15
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f7ff ff90 	bl	8000b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <SysTick_Config+0x40>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7e:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <SysTick_Config+0x40>)
 8000c80:	2207      	movs	r2, #7
 8000c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	e000e010 	.word	0xe000e010

08000c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff ff49 	bl	8000b34 <__NVIC_SetPriorityGrouping>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b086      	sub	sp, #24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
 8000cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cbc:	f7ff ff5e 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8000cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	68b9      	ldr	r1, [r7, #8]
 8000cc6:	6978      	ldr	r0, [r7, #20]
 8000cc8:	f7ff ff90 	bl	8000bec <NVIC_EncodePriority>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff5f 	bl	8000b98 <__NVIC_SetPriority>
}
 8000cda:	bf00      	nop
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff ffb0 	bl	8000c50 <SysTick_Config>
 8000cf0:	4603      	mov	r3, r0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d101      	bne.n	8000d0c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e014      	b.n	8000d36 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	791b      	ldrb	r3, [r3, #4]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d105      	bne.n	8000d22 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff fd61 	bl	80007e4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2202      	movs	r2, #2
 8000d26:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2201      	movs	r2, #1
 8000d32:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b087      	sub	sp, #28
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	60f8      	str	r0, [r7, #12]
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	795b      	ldrb	r3, [r3, #5]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d101      	bne.n	8000d56 <HAL_DAC_ConfigChannel+0x18>
 8000d52:	2302      	movs	r3, #2
 8000d54:	e03c      	b.n	8000dd0 <HAL_DAC_ConfigChannel+0x92>
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	2201      	movs	r2, #1
 8000d5a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2202      	movs	r2, #2
 8000d60:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f003 0310 	and.w	r3, r3, #16
 8000d70:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f003 0310 	and.w	r3, r3, #16
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	6819      	ldr	r1, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f003 0310 	and.w	r3, r3, #16
 8000db2:	22c0      	movs	r2, #192	; 0xc0
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43da      	mvns	r2, r3
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	400a      	ands	r2, r1
 8000dc0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000dce:	2300      	movs	r3, #0
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	371c      	adds	r7, #28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr
	...

08000ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b087      	sub	sp, #28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000df2:	e154      	b.n	800109e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	2101      	movs	r1, #1
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000e00:	4013      	ands	r3, r2
 8000e02:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f000 8146 	beq.w	8001098 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d005      	beq.n	8000e24 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d130      	bne.n	8000e86 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	091b      	lsrs	r3, r3, #4
 8000e70:	f003 0201 	and.w	r2, r3, #1
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	d017      	beq.n	8000ec2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d123      	bne.n	8000f16 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	08da      	lsrs	r2, r3, #3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3208      	adds	r2, #8
 8000ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eda:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	220f      	movs	r2, #15
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	691a      	ldr	r2, [r3, #16]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f003 0307 	and.w	r3, r3, #7
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	08da      	lsrs	r2, r3, #3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3208      	adds	r2, #8
 8000f10:	6939      	ldr	r1, [r7, #16]
 8000f12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	2203      	movs	r2, #3
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 0203 	and.w	r2, r3, #3
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f000 80a0 	beq.w	8001098 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f58:	4b58      	ldr	r3, [pc, #352]	; (80010bc <HAL_GPIO_Init+0x2e0>)
 8000f5a:	6a1b      	ldr	r3, [r3, #32]
 8000f5c:	4a57      	ldr	r2, [pc, #348]	; (80010bc <HAL_GPIO_Init+0x2e0>)
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	6213      	str	r3, [r2, #32]
 8000f64:	4b55      	ldr	r3, [pc, #340]	; (80010bc <HAL_GPIO_Init+0x2e0>)
 8000f66:	6a1b      	ldr	r3, [r3, #32]
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f70:	4a53      	ldr	r2, [pc, #332]	; (80010c0 <HAL_GPIO_Init+0x2e4>)
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	089b      	lsrs	r3, r3, #2
 8000f76:	3302      	adds	r3, #2
 8000f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	220f      	movs	r2, #15
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a4b      	ldr	r2, [pc, #300]	; (80010c4 <HAL_GPIO_Init+0x2e8>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d019      	beq.n	8000fd0 <HAL_GPIO_Init+0x1f4>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a4a      	ldr	r2, [pc, #296]	; (80010c8 <HAL_GPIO_Init+0x2ec>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d013      	beq.n	8000fcc <HAL_GPIO_Init+0x1f0>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a49      	ldr	r2, [pc, #292]	; (80010cc <HAL_GPIO_Init+0x2f0>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d00d      	beq.n	8000fc8 <HAL_GPIO_Init+0x1ec>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a48      	ldr	r2, [pc, #288]	; (80010d0 <HAL_GPIO_Init+0x2f4>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d007      	beq.n	8000fc4 <HAL_GPIO_Init+0x1e8>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a47      	ldr	r2, [pc, #284]	; (80010d4 <HAL_GPIO_Init+0x2f8>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d101      	bne.n	8000fc0 <HAL_GPIO_Init+0x1e4>
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	e008      	b.n	8000fd2 <HAL_GPIO_Init+0x1f6>
 8000fc0:	2305      	movs	r3, #5
 8000fc2:	e006      	b.n	8000fd2 <HAL_GPIO_Init+0x1f6>
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e004      	b.n	8000fd2 <HAL_GPIO_Init+0x1f6>
 8000fc8:	2302      	movs	r3, #2
 8000fca:	e002      	b.n	8000fd2 <HAL_GPIO_Init+0x1f6>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e000      	b.n	8000fd2 <HAL_GPIO_Init+0x1f6>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	f002 0203 	and.w	r2, r2, #3
 8000fd8:	0092      	lsls	r2, r2, #2
 8000fda:	4093      	lsls	r3, r2
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000fe2:	4937      	ldr	r1, [pc, #220]	; (80010c0 <HAL_GPIO_Init+0x2e4>)
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	3302      	adds	r3, #2
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff0:	4b39      	ldr	r3, [pc, #228]	; (80010d8 <HAL_GPIO_Init+0x2fc>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001014:	4a30      	ldr	r2, [pc, #192]	; (80010d8 <HAL_GPIO_Init+0x2fc>)
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800101a:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <HAL_GPIO_Init+0x2fc>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800103e:	4a26      	ldr	r2, [pc, #152]	; (80010d8 <HAL_GPIO_Init+0x2fc>)
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001044:	4b24      	ldr	r3, [pc, #144]	; (80010d8 <HAL_GPIO_Init+0x2fc>)
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	43db      	mvns	r3, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001068:	4a1b      	ldr	r2, [pc, #108]	; (80010d8 <HAL_GPIO_Init+0x2fc>)
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <HAL_GPIO_Init+0x2fc>)
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	43db      	mvns	r3, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001092:	4a11      	ldr	r2, [pc, #68]	; (80010d8 <HAL_GPIO_Init+0x2fc>)
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	3301      	adds	r3, #1
 800109c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	fa22 f303 	lsr.w	r3, r2, r3
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	f47f aea3 	bne.w	8000df4 <HAL_GPIO_Init+0x18>
  }
}
 80010ae:	bf00      	nop
 80010b0:	bf00      	nop
 80010b2:	371c      	adds	r7, #28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40010000 	.word	0x40010000
 80010c4:	40020000 	.word	0x40020000
 80010c8:	40020400 	.word	0x40020400
 80010cc:	40020800 	.word	0x40020800
 80010d0:	40020c00 	.word	0x40020c00
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40010400 	.word	0x40010400

080010dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010de:	b08b      	sub	sp, #44	; 0x2c
 80010e0:	af06      	add	r7, sp, #24
 80010e2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e0d0      	b.n	8001290 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d106      	bne.n	8001108 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff fc36 	bl	8000974 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2203      	movs	r2, #3
 800110c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4618      	mov	r0, r3
 8001116:	f001 f865 	bl	80021e4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800111a:	2300      	movs	r3, #0
 800111c:	73fb      	strb	r3, [r7, #15]
 800111e:	e04c      	b.n	80011ba <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	1c5a      	adds	r2, r3, #1
 8001126:	4613      	mov	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	440b      	add	r3, r1
 8001130:	3301      	adds	r3, #1
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	1c5a      	adds	r2, r3, #1
 800113c:	4613      	mov	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	440b      	add	r3, r1
 8001146:	7bfa      	ldrb	r2, [r7, #15]
 8001148:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800114a:	7bfa      	ldrb	r2, [r7, #15]
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	b298      	uxth	r0, r3
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	4613      	mov	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	4413      	add	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	440b      	add	r3, r1
 800115c:	3336      	adds	r3, #54	; 0x36
 800115e:	4602      	mov	r2, r0
 8001160:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	1c5a      	adds	r2, r3, #1
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	440b      	add	r3, r1
 8001172:	3303      	adds	r3, #3
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001178:	7bfa      	ldrb	r2, [r7, #15]
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	4613      	mov	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	440b      	add	r3, r1
 8001186:	3338      	adds	r3, #56	; 0x38
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800118c:	7bfa      	ldrb	r2, [r7, #15]
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	4613      	mov	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4413      	add	r3, r2
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	440b      	add	r3, r1
 800119a:	333c      	adds	r3, #60	; 0x3c
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011a0:	7bfa      	ldrb	r2, [r7, #15]
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	4613      	mov	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	440b      	add	r3, r1
 80011ae:	3340      	adds	r3, #64	; 0x40
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	3301      	adds	r3, #1
 80011b8:	73fb      	strb	r3, [r7, #15]
 80011ba:	7bfa      	ldrb	r2, [r7, #15]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d3ad      	bcc.n	8001120 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011c4:	2300      	movs	r3, #0
 80011c6:	73fb      	strb	r3, [r7, #15]
 80011c8:	e044      	b.n	8001254 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011ca:	7bfa      	ldrb	r2, [r7, #15]
 80011cc:	6879      	ldr	r1, [r7, #4]
 80011ce:	4613      	mov	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	440b      	add	r3, r1
 80011d8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011e0:	7bfa      	ldrb	r2, [r7, #15]
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	4613      	mov	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	440b      	add	r3, r1
 80011ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80011f2:	7bfa      	ldrb	r2, [r7, #15]
 80011f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011f6:	7bfa      	ldrb	r2, [r7, #15]
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	4613      	mov	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	440b      	add	r3, r1
 8001204:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	440b      	add	r3, r1
 800121a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001222:	7bfa      	ldrb	r2, [r7, #15]
 8001224:	6879      	ldr	r1, [r7, #4]
 8001226:	4613      	mov	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	440b      	add	r3, r1
 8001230:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001238:	7bfa      	ldrb	r2, [r7, #15]
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	440b      	add	r3, r1
 8001246:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	3301      	adds	r3, #1
 8001252:	73fb      	strb	r3, [r7, #15]
 8001254:	7bfa      	ldrb	r2, [r7, #15]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	429a      	cmp	r2, r3
 800125c:	d3b5      	bcc.n	80011ca <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	687e      	ldr	r6, [r7, #4]
 8001266:	466d      	mov	r5, sp
 8001268:	f106 0410 	add.w	r4, r6, #16
 800126c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800126e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001270:	6823      	ldr	r3, [r4, #0]
 8001272:	602b      	str	r3, [r5, #0]
 8001274:	1d33      	adds	r3, r6, #4
 8001276:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001278:	6838      	ldr	r0, [r7, #0]
 800127a:	f000 ffcd 	bl	8002218 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2201      	movs	r2, #1
 800128a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001298 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e31d      	b.n	80018e6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012aa:	4b94      	ldr	r3, [pc, #592]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012b4:	4b91      	ldr	r3, [pc, #580]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012bc:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d07b      	beq.n	80013c2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	2b08      	cmp	r3, #8
 80012ce:	d006      	beq.n	80012de <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	2b0c      	cmp	r3, #12
 80012d4:	d10f      	bne.n	80012f6 <HAL_RCC_OscConfig+0x5e>
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012dc:	d10b      	bne.n	80012f6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012de:	4b87      	ldr	r3, [pc, #540]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d06a      	beq.n	80013c0 <HAL_RCC_OscConfig+0x128>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d166      	bne.n	80013c0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e2f7      	b.n	80018e6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d106      	bne.n	800130c <HAL_RCC_OscConfig+0x74>
 80012fe:	4b7f      	ldr	r3, [pc, #508]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a7e      	ldr	r2, [pc, #504]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 8001304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e02d      	b.n	8001368 <HAL_RCC_OscConfig+0xd0>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d10c      	bne.n	800132e <HAL_RCC_OscConfig+0x96>
 8001314:	4b79      	ldr	r3, [pc, #484]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a78      	ldr	r2, [pc, #480]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 800131a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	4b76      	ldr	r3, [pc, #472]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a75      	ldr	r2, [pc, #468]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 8001326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	e01c      	b.n	8001368 <HAL_RCC_OscConfig+0xd0>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b05      	cmp	r3, #5
 8001334:	d10c      	bne.n	8001350 <HAL_RCC_OscConfig+0xb8>
 8001336:	4b71      	ldr	r3, [pc, #452]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a70      	ldr	r2, [pc, #448]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 800133c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	4b6e      	ldr	r3, [pc, #440]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a6d      	ldr	r2, [pc, #436]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 8001348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	e00b      	b.n	8001368 <HAL_RCC_OscConfig+0xd0>
 8001350:	4b6a      	ldr	r3, [pc, #424]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a69      	ldr	r2, [pc, #420]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 8001356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	4b67      	ldr	r3, [pc, #412]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a66      	ldr	r2, [pc, #408]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 8001362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d013      	beq.n	8001398 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff fbd6 	bl	8000b20 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001378:	f7ff fbd2 	bl	8000b20 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	; 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e2ad      	b.n	80018e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800138a:	4b5c      	ldr	r3, [pc, #368]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f0      	beq.n	8001378 <HAL_RCC_OscConfig+0xe0>
 8001396:	e014      	b.n	80013c2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff fbc2 	bl	8000b20 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a0:	f7ff fbbe 	bl	8000b20 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b64      	cmp	r3, #100	; 0x64
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e299      	b.n	80018e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013b2:	4b52      	ldr	r3, [pc, #328]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0x108>
 80013be:	e000      	b.n	80013c2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d05a      	beq.n	8001484 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	2b04      	cmp	r3, #4
 80013d2:	d005      	beq.n	80013e0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	2b0c      	cmp	r3, #12
 80013d8:	d119      	bne.n	800140e <HAL_RCC_OscConfig+0x176>
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d116      	bne.n	800140e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e0:	4b46      	ldr	r3, [pc, #280]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <HAL_RCC_OscConfig+0x160>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d001      	beq.n	80013f8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e276      	b.n	80018e6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f8:	4b40      	ldr	r3, [pc, #256]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	021b      	lsls	r3, r3, #8
 8001406:	493d      	ldr	r1, [pc, #244]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 8001408:	4313      	orrs	r3, r2
 800140a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140c:	e03a      	b.n	8001484 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d020      	beq.n	8001458 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001416:	4b3a      	ldr	r3, [pc, #232]	; (8001500 <HAL_RCC_OscConfig+0x268>)
 8001418:	2201      	movs	r2, #1
 800141a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141c:	f7ff fb80 	bl	8000b20 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001424:	f7ff fb7c 	bl	8000b20 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e257      	b.n	80018e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001436:	4b31      	ldr	r3, [pc, #196]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f0      	beq.n	8001424 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001442:	4b2e      	ldr	r3, [pc, #184]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	492a      	ldr	r1, [pc, #168]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 8001452:	4313      	orrs	r3, r2
 8001454:	604b      	str	r3, [r1, #4]
 8001456:	e015      	b.n	8001484 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001458:	4b29      	ldr	r3, [pc, #164]	; (8001500 <HAL_RCC_OscConfig+0x268>)
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145e:	f7ff fb5f 	bl	8000b20 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001466:	f7ff fb5b 	bl	8000b20 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e236      	b.n	80018e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001478:	4b20      	ldr	r3, [pc, #128]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1f0      	bne.n	8001466 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0310 	and.w	r3, r3, #16
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80b8 	beq.w	8001602 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d170      	bne.n	800157a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d005      	beq.n	80014b0 <HAL_RCC_OscConfig+0x218>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e21a      	b.n	80018e6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1a      	ldr	r2, [r3, #32]
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80014bc:	429a      	cmp	r2, r3
 80014be:	d921      	bls.n	8001504 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 fc7f 	bl	8001dc8 <RCC_SetFlashLatencyFromMSIRange>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e208      	b.n	80018e6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	4906      	ldr	r1, [pc, #24]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014e6:	4b05      	ldr	r3, [pc, #20]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	061b      	lsls	r3, r3, #24
 80014f4:	4901      	ldr	r1, [pc, #4]	; (80014fc <HAL_RCC_OscConfig+0x264>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	604b      	str	r3, [r1, #4]
 80014fa:	e020      	b.n	800153e <HAL_RCC_OscConfig+0x2a6>
 80014fc:	40023800 	.word	0x40023800
 8001500:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001504:	4ba4      	ldr	r3, [pc, #656]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	49a1      	ldr	r1, [pc, #644]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 8001512:	4313      	orrs	r3, r2
 8001514:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001516:	4ba0      	ldr	r3, [pc, #640]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	061b      	lsls	r3, r3, #24
 8001524:	499c      	ldr	r1, [pc, #624]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 8001526:	4313      	orrs	r3, r2
 8001528:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	4618      	mov	r0, r3
 8001530:	f000 fc4a 	bl	8001dc8 <RCC_SetFlashLatencyFromMSIRange>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e1d3      	b.n	80018e6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	0b5b      	lsrs	r3, r3, #13
 8001544:	3301      	adds	r3, #1
 8001546:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800154e:	4a92      	ldr	r2, [pc, #584]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 8001550:	6892      	ldr	r2, [r2, #8]
 8001552:	0912      	lsrs	r2, r2, #4
 8001554:	f002 020f 	and.w	r2, r2, #15
 8001558:	4990      	ldr	r1, [pc, #576]	; (800179c <HAL_RCC_OscConfig+0x504>)
 800155a:	5c8a      	ldrb	r2, [r1, r2]
 800155c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800155e:	4a90      	ldr	r2, [pc, #576]	; (80017a0 <HAL_RCC_OscConfig+0x508>)
 8001560:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001562:	4b90      	ldr	r3, [pc, #576]	; (80017a4 <HAL_RCC_OscConfig+0x50c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fa8e 	bl	8000a88 <HAL_InitTick>
 800156c:	4603      	mov	r3, r0
 800156e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d045      	beq.n	8001602 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	e1b5      	b.n	80018e6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d029      	beq.n	80015d6 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001582:	4b89      	ldr	r3, [pc, #548]	; (80017a8 <HAL_RCC_OscConfig+0x510>)
 8001584:	2201      	movs	r2, #1
 8001586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7ff faca 	bl	8000b20 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001590:	f7ff fac6 	bl	8000b20 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e1a1      	b.n	80018e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015a2:	4b7d      	ldr	r3, [pc, #500]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ae:	4b7a      	ldr	r3, [pc, #488]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a1b      	ldr	r3, [r3, #32]
 80015ba:	4977      	ldr	r1, [pc, #476]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015c0:	4b75      	ldr	r3, [pc, #468]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	061b      	lsls	r3, r3, #24
 80015ce:	4972      	ldr	r1, [pc, #456]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]
 80015d4:	e015      	b.n	8001602 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015d6:	4b74      	ldr	r3, [pc, #464]	; (80017a8 <HAL_RCC_OscConfig+0x510>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015dc:	f7ff faa0 	bl	8000b20 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015e4:	f7ff fa9c 	bl	8000b20 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e177      	b.n	80018e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015f6:	4b68      	ldr	r3, [pc, #416]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	2b00      	cmp	r3, #0
 800160c:	d030      	beq.n	8001670 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d016      	beq.n	8001644 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001616:	4b65      	ldr	r3, [pc, #404]	; (80017ac <HAL_RCC_OscConfig+0x514>)
 8001618:	2201      	movs	r2, #1
 800161a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161c:	f7ff fa80 	bl	8000b20 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001624:	f7ff fa7c 	bl	8000b20 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e157      	b.n	80018e6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001636:	4b58      	ldr	r3, [pc, #352]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 8001638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f0      	beq.n	8001624 <HAL_RCC_OscConfig+0x38c>
 8001642:	e015      	b.n	8001670 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001644:	4b59      	ldr	r3, [pc, #356]	; (80017ac <HAL_RCC_OscConfig+0x514>)
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164a:	f7ff fa69 	bl	8000b20 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001652:	f7ff fa65 	bl	8000b20 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e140      	b.n	80018e6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001664:	4b4c      	ldr	r3, [pc, #304]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 8001666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1f0      	bne.n	8001652 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 80b5 	beq.w	80017e8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001682:	4b45      	ldr	r3, [pc, #276]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 8001684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10d      	bne.n	80016aa <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800168e:	4b42      	ldr	r3, [pc, #264]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	4a41      	ldr	r2, [pc, #260]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001698:	6253      	str	r3, [r2, #36]	; 0x24
 800169a:	4b3f      	ldr	r3, [pc, #252]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016a6:	2301      	movs	r3, #1
 80016a8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016aa:	4b41      	ldr	r3, [pc, #260]	; (80017b0 <HAL_RCC_OscConfig+0x518>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d118      	bne.n	80016e8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016b6:	4b3e      	ldr	r3, [pc, #248]	; (80017b0 <HAL_RCC_OscConfig+0x518>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a3d      	ldr	r2, [pc, #244]	; (80017b0 <HAL_RCC_OscConfig+0x518>)
 80016bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c2:	f7ff fa2d 	bl	8000b20 <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ca:	f7ff fa29 	bl	8000b20 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b64      	cmp	r3, #100	; 0x64
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e104      	b.n	80018e6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016dc:	4b34      	ldr	r3, [pc, #208]	; (80017b0 <HAL_RCC_OscConfig+0x518>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0f0      	beq.n	80016ca <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d106      	bne.n	80016fe <HAL_RCC_OscConfig+0x466>
 80016f0:	4b29      	ldr	r3, [pc, #164]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 80016f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f4:	4a28      	ldr	r2, [pc, #160]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 80016f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016fa:	6353      	str	r3, [r2, #52]	; 0x34
 80016fc:	e02d      	b.n	800175a <HAL_RCC_OscConfig+0x4c2>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10c      	bne.n	8001720 <HAL_RCC_OscConfig+0x488>
 8001706:	4b24      	ldr	r3, [pc, #144]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 8001708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800170a:	4a23      	ldr	r2, [pc, #140]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 800170c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001710:	6353      	str	r3, [r2, #52]	; 0x34
 8001712:	4b21      	ldr	r3, [pc, #132]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 8001714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001716:	4a20      	ldr	r2, [pc, #128]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 8001718:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800171c:	6353      	str	r3, [r2, #52]	; 0x34
 800171e:	e01c      	b.n	800175a <HAL_RCC_OscConfig+0x4c2>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b05      	cmp	r3, #5
 8001726:	d10c      	bne.n	8001742 <HAL_RCC_OscConfig+0x4aa>
 8001728:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 800172a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800172c:	4a1a      	ldr	r2, [pc, #104]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 800172e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001732:	6353      	str	r3, [r2, #52]	; 0x34
 8001734:	4b18      	ldr	r3, [pc, #96]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 8001736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001738:	4a17      	ldr	r2, [pc, #92]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 800173a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173e:	6353      	str	r3, [r2, #52]	; 0x34
 8001740:	e00b      	b.n	800175a <HAL_RCC_OscConfig+0x4c2>
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 8001744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001746:	4a14      	ldr	r2, [pc, #80]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 8001748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800174c:	6353      	str	r3, [r2, #52]	; 0x34
 800174e:	4b12      	ldr	r3, [pc, #72]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 8001750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001752:	4a11      	ldr	r2, [pc, #68]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 8001754:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001758:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d015      	beq.n	800178e <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001762:	f7ff f9dd 	bl	8000b20 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001768:	e00a      	b.n	8001780 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800176a:	f7ff f9d9 	bl	8000b20 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	f241 3288 	movw	r2, #5000	; 0x1388
 8001778:	4293      	cmp	r3, r2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e0b2      	b.n	80018e6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 8001782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0ee      	beq.n	800176a <HAL_RCC_OscConfig+0x4d2>
 800178c:	e023      	b.n	80017d6 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178e:	f7ff f9c7 	bl	8000b20 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001794:	e019      	b.n	80017ca <HAL_RCC_OscConfig+0x532>
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	080022d4 	.word	0x080022d4
 80017a0:	20000000 	.word	0x20000000
 80017a4:	20000004 	.word	0x20000004
 80017a8:	42470020 	.word	0x42470020
 80017ac:	42470680 	.word	0x42470680
 80017b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017b4:	f7ff f9b4 	bl	8000b20 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e08d      	b.n	80018e6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017ca:	4b49      	ldr	r3, [pc, #292]	; (80018f0 <HAL_RCC_OscConfig+0x658>)
 80017cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1ee      	bne.n	80017b4 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017d6:	7ffb      	ldrb	r3, [r7, #31]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d105      	bne.n	80017e8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017dc:	4b44      	ldr	r3, [pc, #272]	; (80018f0 <HAL_RCC_OscConfig+0x658>)
 80017de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e0:	4a43      	ldr	r2, [pc, #268]	; (80018f0 <HAL_RCC_OscConfig+0x658>)
 80017e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017e6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d079      	beq.n	80018e4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	2b0c      	cmp	r3, #12
 80017f4:	d056      	beq.n	80018a4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d13b      	bne.n	8001876 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fe:	4b3d      	ldr	r3, [pc, #244]	; (80018f4 <HAL_RCC_OscConfig+0x65c>)
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001804:	f7ff f98c 	bl	8000b20 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800180c:	f7ff f988 	bl	8000b20 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e063      	b.n	80018e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800181e:	4b34      	ldr	r3, [pc, #208]	; (80018f0 <HAL_RCC_OscConfig+0x658>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800182a:	4b31      	ldr	r3, [pc, #196]	; (80018f0 <HAL_RCC_OscConfig+0x658>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183a:	4319      	orrs	r1, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	430b      	orrs	r3, r1
 8001842:	492b      	ldr	r1, [pc, #172]	; (80018f0 <HAL_RCC_OscConfig+0x658>)
 8001844:	4313      	orrs	r3, r2
 8001846:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001848:	4b2a      	ldr	r3, [pc, #168]	; (80018f4 <HAL_RCC_OscConfig+0x65c>)
 800184a:	2201      	movs	r2, #1
 800184c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184e:	f7ff f967 	bl	8000b20 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001856:	f7ff f963 	bl	8000b20 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e03e      	b.n	80018e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001868:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <HAL_RCC_OscConfig+0x658>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0f0      	beq.n	8001856 <HAL_RCC_OscConfig+0x5be>
 8001874:	e036      	b.n	80018e4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001876:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <HAL_RCC_OscConfig+0x65c>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187c:	f7ff f950 	bl	8000b20 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001884:	f7ff f94c 	bl	8000b20 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e027      	b.n	80018e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001896:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <HAL_RCC_OscConfig+0x658>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x5ec>
 80018a2:	e01f      	b.n	80018e4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d101      	bne.n	80018b0 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e01a      	b.n	80018e6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <HAL_RCC_OscConfig+0x658>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d10d      	bne.n	80018e0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d106      	bne.n	80018e0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018dc:	429a      	cmp	r2, r3
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e000      	b.n	80018e6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3720      	adds	r7, #32
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800
 80018f4:	42470060 	.word	0x42470060

080018f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e11a      	b.n	8001b42 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800190c:	4b8f      	ldr	r3, [pc, #572]	; (8001b4c <HAL_RCC_ClockConfig+0x254>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d919      	bls.n	800194e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d105      	bne.n	800192c <HAL_RCC_ClockConfig+0x34>
 8001920:	4b8a      	ldr	r3, [pc, #552]	; (8001b4c <HAL_RCC_ClockConfig+0x254>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a89      	ldr	r2, [pc, #548]	; (8001b4c <HAL_RCC_ClockConfig+0x254>)
 8001926:	f043 0304 	orr.w	r3, r3, #4
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	4b87      	ldr	r3, [pc, #540]	; (8001b4c <HAL_RCC_ClockConfig+0x254>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f023 0201 	bic.w	r2, r3, #1
 8001934:	4985      	ldr	r1, [pc, #532]	; (8001b4c <HAL_RCC_ClockConfig+0x254>)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	4313      	orrs	r3, r2
 800193a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800193c:	4b83      	ldr	r3, [pc, #524]	; (8001b4c <HAL_RCC_ClockConfig+0x254>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d001      	beq.n	800194e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e0f9      	b.n	8001b42 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d008      	beq.n	800196c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800195a:	4b7d      	ldr	r3, [pc, #500]	; (8001b50 <HAL_RCC_ClockConfig+0x258>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	497a      	ldr	r1, [pc, #488]	; (8001b50 <HAL_RCC_ClockConfig+0x258>)
 8001968:	4313      	orrs	r3, r2
 800196a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 808e 	beq.w	8001a96 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d107      	bne.n	8001992 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001982:	4b73      	ldr	r3, [pc, #460]	; (8001b50 <HAL_RCC_ClockConfig+0x258>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d121      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e0d7      	b.n	8001b42 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b03      	cmp	r3, #3
 8001998:	d107      	bne.n	80019aa <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800199a:	4b6d      	ldr	r3, [pc, #436]	; (8001b50 <HAL_RCC_ClockConfig+0x258>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d115      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e0cb      	b.n	8001b42 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019b2:	4b67      	ldr	r3, [pc, #412]	; (8001b50 <HAL_RCC_ClockConfig+0x258>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d109      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e0bf      	b.n	8001b42 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019c2:	4b63      	ldr	r3, [pc, #396]	; (8001b50 <HAL_RCC_ClockConfig+0x258>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e0b7      	b.n	8001b42 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019d2:	4b5f      	ldr	r3, [pc, #380]	; (8001b50 <HAL_RCC_ClockConfig+0x258>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f023 0203 	bic.w	r2, r3, #3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	495c      	ldr	r1, [pc, #368]	; (8001b50 <HAL_RCC_ClockConfig+0x258>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019e4:	f7ff f89c 	bl	8000b20 <HAL_GetTick>
 80019e8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d112      	bne.n	8001a18 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019f2:	e00a      	b.n	8001a0a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f4:	f7ff f894 	bl	8000b20 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e09b      	b.n	8001b42 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a0a:	4b51      	ldr	r3, [pc, #324]	; (8001b50 <HAL_RCC_ClockConfig+0x258>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 030c 	and.w	r3, r3, #12
 8001a12:	2b08      	cmp	r3, #8
 8001a14:	d1ee      	bne.n	80019f4 <HAL_RCC_ClockConfig+0xfc>
 8001a16:	e03e      	b.n	8001a96 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b03      	cmp	r3, #3
 8001a1e:	d112      	bne.n	8001a46 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a20:	e00a      	b.n	8001a38 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a22:	f7ff f87d 	bl	8000b20 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e084      	b.n	8001b42 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a38:	4b45      	ldr	r3, [pc, #276]	; (8001b50 <HAL_RCC_ClockConfig+0x258>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 030c 	and.w	r3, r3, #12
 8001a40:	2b0c      	cmp	r3, #12
 8001a42:	d1ee      	bne.n	8001a22 <HAL_RCC_ClockConfig+0x12a>
 8001a44:	e027      	b.n	8001a96 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d11d      	bne.n	8001a8a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a4e:	e00a      	b.n	8001a66 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a50:	f7ff f866 	bl	8000b20 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e06d      	b.n	8001b42 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a66:	4b3a      	ldr	r3, [pc, #232]	; (8001b50 <HAL_RCC_ClockConfig+0x258>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	d1ee      	bne.n	8001a50 <HAL_RCC_ClockConfig+0x158>
 8001a72:	e010      	b.n	8001a96 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a74:	f7ff f854 	bl	8000b20 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e05b      	b.n	8001b42 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a8a:	4b31      	ldr	r3, [pc, #196]	; (8001b50 <HAL_RCC_ClockConfig+0x258>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1ee      	bne.n	8001a74 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a96:	4b2d      	ldr	r3, [pc, #180]	; (8001b4c <HAL_RCC_ClockConfig+0x254>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d219      	bcs.n	8001ad8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d105      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0x1be>
 8001aaa:	4b28      	ldr	r3, [pc, #160]	; (8001b4c <HAL_RCC_ClockConfig+0x254>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a27      	ldr	r2, [pc, #156]	; (8001b4c <HAL_RCC_ClockConfig+0x254>)
 8001ab0:	f043 0304 	orr.w	r3, r3, #4
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <HAL_RCC_ClockConfig+0x254>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f023 0201 	bic.w	r2, r3, #1
 8001abe:	4923      	ldr	r1, [pc, #140]	; (8001b4c <HAL_RCC_ClockConfig+0x254>)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac6:	4b21      	ldr	r3, [pc, #132]	; (8001b4c <HAL_RCC_ClockConfig+0x254>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d001      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e034      	b.n	8001b42 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d008      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae4:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <HAL_RCC_ClockConfig+0x258>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	4917      	ldr	r1, [pc, #92]	; (8001b50 <HAL_RCC_ClockConfig+0x258>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d009      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b02:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <HAL_RCC_ClockConfig+0x258>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	490f      	ldr	r1, [pc, #60]	; (8001b50 <HAL_RCC_ClockConfig+0x258>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b16:	f000 f859 	bl	8001bcc <HAL_RCC_GetSysClockFreq>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <HAL_RCC_ClockConfig+0x258>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	091b      	lsrs	r3, r3, #4
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	490b      	ldr	r1, [pc, #44]	; (8001b54 <HAL_RCC_ClockConfig+0x25c>)
 8001b28:	5ccb      	ldrb	r3, [r1, r3]
 8001b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <HAL_RCC_ClockConfig+0x260>)
 8001b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b32:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <HAL_RCC_ClockConfig+0x264>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe ffa6 	bl	8000a88 <HAL_InitTick>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b40:	7afb      	ldrb	r3, [r7, #11]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40023c00 	.word	0x40023c00
 8001b50:	40023800 	.word	0x40023800
 8001b54:	080022d4 	.word	0x080022d4
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	20000004 	.word	0x20000004

08001b60 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16 division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	; 0x28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001b70:	2302      	movs	r3, #2
 8001b72:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 8001b78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b7c:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <HAL_RCC_MCOConfig+0x64>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	4a0f      	ldr	r2, [pc, #60]	; (8001bc4 <HAL_RCC_MCOConfig+0x64>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	61d3      	str	r3, [r2, #28]
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <HAL_RCC_MCOConfig+0x64>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4809      	ldr	r0, [pc, #36]	; (8001bc8 <HAL_RCC_MCOConfig+0x68>)
 8001ba2:	f7ff f91b 	bl	8000ddc <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8001ba6:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <HAL_RCC_MCOConfig+0x64>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 8001bae:	68b9      	ldr	r1, [r7, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	430b      	orrs	r3, r1
 8001bb4:	4903      	ldr	r1, [pc, #12]	; (8001bc4 <HAL_RCC_MCOConfig+0x64>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	608b      	str	r3, [r1, #8]
}
 8001bba:	bf00      	nop
 8001bbc:	3728      	adds	r7, #40	; 0x28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40020000 	.word	0x40020000

08001bcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bcc:	b5b0      	push	{r4, r5, r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001bd2:	4b61      	ldr	r3, [pc, #388]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x18c>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b0c      	cmp	r3, #12
 8001be0:	d00d      	beq.n	8001bfe <HAL_RCC_GetSysClockFreq+0x32>
 8001be2:	2b0c      	cmp	r3, #12
 8001be4:	f200 80a4 	bhi.w	8001d30 <HAL_RCC_GetSysClockFreq+0x164>
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d002      	beq.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x26>
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d003      	beq.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x2c>
 8001bf0:	e09e      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bf2:	4b5a      	ldr	r3, [pc, #360]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x190>)
 8001bf4:	613b      	str	r3, [r7, #16]
      break;
 8001bf6:	e0a9      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bf8:	4b58      	ldr	r3, [pc, #352]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x190>)
 8001bfa:	613b      	str	r3, [r7, #16]
      break;
 8001bfc:	e0a6      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	0c9b      	lsrs	r3, r3, #18
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	4a56      	ldr	r2, [pc, #344]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x194>)
 8001c08:	5cd3      	ldrb	r3, [r2, r3]
 8001c0a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	0d9b      	lsrs	r3, r3, #22
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	3301      	adds	r3, #1
 8001c16:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c18:	4b4f      	ldr	r3, [pc, #316]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x18c>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d041      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	461c      	mov	r4, r3
 8001c28:	f04f 0500 	mov.w	r5, #0
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	4629      	mov	r1, r5
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	014b      	lsls	r3, r1, #5
 8001c3a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c3e:	0142      	lsls	r2, r0, #5
 8001c40:	4610      	mov	r0, r2
 8001c42:	4619      	mov	r1, r3
 8001c44:	1b00      	subs	r0, r0, r4
 8001c46:	eb61 0105 	sbc.w	r1, r1, r5
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	018b      	lsls	r3, r1, #6
 8001c54:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c58:	0182      	lsls	r2, r0, #6
 8001c5a:	1a12      	subs	r2, r2, r0
 8001c5c:	eb63 0301 	sbc.w	r3, r3, r1
 8001c60:	f04f 0000 	mov.w	r0, #0
 8001c64:	f04f 0100 	mov.w	r1, #0
 8001c68:	00d9      	lsls	r1, r3, #3
 8001c6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c6e:	00d0      	lsls	r0, r2, #3
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	1912      	adds	r2, r2, r4
 8001c76:	eb45 0303 	adc.w	r3, r5, r3
 8001c7a:	f04f 0000 	mov.w	r0, #0
 8001c7e:	f04f 0100 	mov.w	r1, #0
 8001c82:	0299      	lsls	r1, r3, #10
 8001c84:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c88:	0290      	lsls	r0, r2, #10
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	461a      	mov	r2, r3
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	f7fe fa6f 	bl	800017c <__aeabi_uldivmod>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	e040      	b.n	8001d2a <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	461c      	mov	r4, r3
 8001cac:	f04f 0500 	mov.w	r5, #0
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	4629      	mov	r1, r5
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	014b      	lsls	r3, r1, #5
 8001cbe:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cc2:	0142      	lsls	r2, r0, #5
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	1b00      	subs	r0, r0, r4
 8001cca:	eb61 0105 	sbc.w	r1, r1, r5
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	018b      	lsls	r3, r1, #6
 8001cd8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001cdc:	0182      	lsls	r2, r0, #6
 8001cde:	1a12      	subs	r2, r2, r0
 8001ce0:	eb63 0301 	sbc.w	r3, r3, r1
 8001ce4:	f04f 0000 	mov.w	r0, #0
 8001ce8:	f04f 0100 	mov.w	r1, #0
 8001cec:	00d9      	lsls	r1, r3, #3
 8001cee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cf2:	00d0      	lsls	r0, r2, #3
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	1912      	adds	r2, r2, r4
 8001cfa:	eb45 0303 	adc.w	r3, r5, r3
 8001cfe:	f04f 0000 	mov.w	r0, #0
 8001d02:	f04f 0100 	mov.w	r1, #0
 8001d06:	0299      	lsls	r1, r3, #10
 8001d08:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001d0c:	0290      	lsls	r0, r2, #10
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	4610      	mov	r0, r2
 8001d14:	4619      	mov	r1, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	f7fe fa2d 	bl	800017c <__aeabi_uldivmod>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4613      	mov	r3, r2
 8001d28:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	613b      	str	r3, [r7, #16]
      break;
 8001d2e:	e00d      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x18c>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	0b5b      	lsrs	r3, r3, #13
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	613b      	str	r3, [r7, #16]
      break;
 8001d4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d4c:	693b      	ldr	r3, [r7, #16]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bdb0      	pop	{r4, r5, r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	00f42400 	.word	0x00f42400
 8001d60:	080022c8 	.word	0x080022c8

08001d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d68:	4b02      	ldr	r3, [pc, #8]	; (8001d74 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	20000000 	.word	0x20000000

08001d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d7c:	f7ff fff2 	bl	8001d64 <HAL_RCC_GetHCLKFreq>
 8001d80:	4602      	mov	r2, r0
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	0a1b      	lsrs	r3, r3, #8
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	4903      	ldr	r1, [pc, #12]	; (8001d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d8e:	5ccb      	ldrb	r3, [r1, r3]
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	080022e4 	.word	0x080022e4

08001da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001da4:	f7ff ffde 	bl	8001d64 <HAL_RCC_GetHCLKFreq>
 8001da8:	4602      	mov	r2, r0
 8001daa:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	0adb      	lsrs	r3, r3, #11
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	4903      	ldr	r1, [pc, #12]	; (8001dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001db6:	5ccb      	ldrb	r3, [r1, r3]
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	080022e4 	.word	0x080022e4

08001dc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001dd4:	4b29      	ldr	r3, [pc, #164]	; (8001e7c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d12c      	bne.n	8001e3a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001de0:	4b26      	ldr	r3, [pc, #152]	; (8001e7c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d005      	beq.n	8001df8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001dec:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	e016      	b.n	8001e26 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df8:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	4a1f      	ldr	r2, [pc, #124]	; (8001e7c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e02:	6253      	str	r3, [r2, #36]	; 0x24
 8001e04:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001e10:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001e18:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e1a:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	4a17      	ldr	r2, [pc, #92]	; (8001e7c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e24:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001e2c:	d105      	bne.n	8001e3a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001e34:	d101      	bne.n	8001e3a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001e36:	2301      	movs	r3, #1
 8001e38:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d105      	bne.n	8001e4c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001e40:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a0f      	ldr	r2, [pc, #60]	; (8001e84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e46:	f043 0304 	orr.w	r3, r3, #4
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f023 0201 	bic.w	r2, r3, #1
 8001e54:	490b      	ldr	r1, [pc, #44]	; (8001e84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e5c:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d001      	beq.n	8001e6e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	371c      	adds	r7, #28
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40007000 	.word	0x40007000
 8001e84:	40023c00 	.word	0x40023c00

08001e88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e06e      	b.n	8001f78 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d108      	bne.n	8001eb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001eaa:	d009      	beq.n	8001ec0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	61da      	str	r2, [r3, #28]
 8001eb2:	e005      	b.n	8001ec0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d106      	bne.n	8001ee0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7fe fcc2 	bl	8000864 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ef6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f30:	431a      	orrs	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f44:	ea42 0103 	orr.w	r1, r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	0c1a      	lsrs	r2, r3, #16
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f002 0204 	and.w	r2, r2, #4
 8001f66:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e03f      	b.n	8002012 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d106      	bne.n	8001fac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7fe fca0 	bl	80008ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2224      	movs	r2, #36	; 0x24
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f829 	bl	800201c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	691a      	ldr	r2, [r3, #16]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	695a      	ldr	r2, [r3, #20]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fe8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68da      	ldr	r2, [r3, #12]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ff8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2220      	movs	r2, #32
 8002004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2220      	movs	r2, #32
 800200c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	431a      	orrs	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	4313      	orrs	r3, r2
 8002050:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800205c:	f023 030c 	bic.w	r3, r3, #12
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	430b      	orrs	r3, r1
 8002068:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	699a      	ldr	r2, [r3, #24]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a55      	ldr	r2, [pc, #340]	; (80021dc <UART_SetConfig+0x1c0>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d103      	bne.n	8002092 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800208a:	f7ff fe89 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	e002      	b.n	8002098 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002092:	f7ff fe71 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8002096:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020a0:	d14c      	bne.n	800213c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	009a      	lsls	r2, r3, #2
 80020ac:	441a      	add	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b8:	4a49      	ldr	r2, [pc, #292]	; (80021e0 <UART_SetConfig+0x1c4>)
 80020ba:	fba2 2303 	umull	r2, r3, r2, r3
 80020be:	095b      	lsrs	r3, r3, #5
 80020c0:	0119      	lsls	r1, r3, #4
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	009a      	lsls	r2, r3, #2
 80020cc:	441a      	add	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80020d8:	4b41      	ldr	r3, [pc, #260]	; (80021e0 <UART_SetConfig+0x1c4>)
 80020da:	fba3 0302 	umull	r0, r3, r3, r2
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	2064      	movs	r0, #100	; 0x64
 80020e2:	fb00 f303 	mul.w	r3, r0, r3
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	3332      	adds	r3, #50	; 0x32
 80020ec:	4a3c      	ldr	r2, [pc, #240]	; (80021e0 <UART_SetConfig+0x1c4>)
 80020ee:	fba2 2303 	umull	r2, r3, r2, r3
 80020f2:	095b      	lsrs	r3, r3, #5
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020fa:	4419      	add	r1, r3
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4613      	mov	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	009a      	lsls	r2, r3, #2
 8002106:	441a      	add	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002112:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <UART_SetConfig+0x1c4>)
 8002114:	fba3 0302 	umull	r0, r3, r3, r2
 8002118:	095b      	lsrs	r3, r3, #5
 800211a:	2064      	movs	r0, #100	; 0x64
 800211c:	fb00 f303 	mul.w	r3, r0, r3
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	3332      	adds	r3, #50	; 0x32
 8002126:	4a2e      	ldr	r2, [pc, #184]	; (80021e0 <UART_SetConfig+0x1c4>)
 8002128:	fba2 2303 	umull	r2, r3, r2, r3
 800212c:	095b      	lsrs	r3, r3, #5
 800212e:	f003 0207 	and.w	r2, r3, #7
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	440a      	add	r2, r1
 8002138:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800213a:	e04a      	b.n	80021d2 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	4613      	mov	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	009a      	lsls	r2, r3, #2
 8002146:	441a      	add	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002152:	4a23      	ldr	r2, [pc, #140]	; (80021e0 <UART_SetConfig+0x1c4>)
 8002154:	fba2 2303 	umull	r2, r3, r2, r3
 8002158:	095b      	lsrs	r3, r3, #5
 800215a:	0119      	lsls	r1, r3, #4
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	009a      	lsls	r2, r3, #2
 8002166:	441a      	add	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002172:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <UART_SetConfig+0x1c4>)
 8002174:	fba3 0302 	umull	r0, r3, r3, r2
 8002178:	095b      	lsrs	r3, r3, #5
 800217a:	2064      	movs	r0, #100	; 0x64
 800217c:	fb00 f303 	mul.w	r3, r0, r3
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	3332      	adds	r3, #50	; 0x32
 8002186:	4a16      	ldr	r2, [pc, #88]	; (80021e0 <UART_SetConfig+0x1c4>)
 8002188:	fba2 2303 	umull	r2, r3, r2, r3
 800218c:	095b      	lsrs	r3, r3, #5
 800218e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002192:	4419      	add	r1, r3
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	009a      	lsls	r2, r3, #2
 800219e:	441a      	add	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80021aa:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <UART_SetConfig+0x1c4>)
 80021ac:	fba3 0302 	umull	r0, r3, r3, r2
 80021b0:	095b      	lsrs	r3, r3, #5
 80021b2:	2064      	movs	r0, #100	; 0x64
 80021b4:	fb00 f303 	mul.w	r3, r0, r3
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	3332      	adds	r3, #50	; 0x32
 80021be:	4a08      	ldr	r2, [pc, #32]	; (80021e0 <UART_SetConfig+0x1c4>)
 80021c0:	fba2 2303 	umull	r2, r3, r2, r3
 80021c4:	095b      	lsrs	r3, r3, #5
 80021c6:	f003 020f 	and.w	r2, r3, #15
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	440a      	add	r2, r1
 80021d0:	609a      	str	r2, [r3, #8]
}
 80021d2:	bf00      	nop
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40013800 	.word	0x40013800
 80021e0:	51eb851f 	.word	0x51eb851f

080021e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80021ec:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80021f0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	b29b      	uxth	r3, r3
 8002202:	4013      	ands	r3, r2
 8002204:	b29a      	uxth	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002218:	b084      	sub	sp, #16
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	f107 0014 	add.w	r0, r7, #20
 8002226:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	b004      	add	sp, #16
 8002256:	4770      	bx	lr

08002258 <__libc_init_array>:
 8002258:	b570      	push	{r4, r5, r6, lr}
 800225a:	2600      	movs	r6, #0
 800225c:	4d0c      	ldr	r5, [pc, #48]	; (8002290 <__libc_init_array+0x38>)
 800225e:	4c0d      	ldr	r4, [pc, #52]	; (8002294 <__libc_init_array+0x3c>)
 8002260:	1b64      	subs	r4, r4, r5
 8002262:	10a4      	asrs	r4, r4, #2
 8002264:	42a6      	cmp	r6, r4
 8002266:	d109      	bne.n	800227c <__libc_init_array+0x24>
 8002268:	f000 f822 	bl	80022b0 <_init>
 800226c:	2600      	movs	r6, #0
 800226e:	4d0a      	ldr	r5, [pc, #40]	; (8002298 <__libc_init_array+0x40>)
 8002270:	4c0a      	ldr	r4, [pc, #40]	; (800229c <__libc_init_array+0x44>)
 8002272:	1b64      	subs	r4, r4, r5
 8002274:	10a4      	asrs	r4, r4, #2
 8002276:	42a6      	cmp	r6, r4
 8002278:	d105      	bne.n	8002286 <__libc_init_array+0x2e>
 800227a:	bd70      	pop	{r4, r5, r6, pc}
 800227c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002280:	4798      	blx	r3
 8002282:	3601      	adds	r6, #1
 8002284:	e7ee      	b.n	8002264 <__libc_init_array+0xc>
 8002286:	f855 3b04 	ldr.w	r3, [r5], #4
 800228a:	4798      	blx	r3
 800228c:	3601      	adds	r6, #1
 800228e:	e7f2      	b.n	8002276 <__libc_init_array+0x1e>
 8002290:	080022f4 	.word	0x080022f4
 8002294:	080022f4 	.word	0x080022f4
 8002298:	080022f4 	.word	0x080022f4
 800229c:	080022f8 	.word	0x080022f8

080022a0 <memset>:
 80022a0:	4603      	mov	r3, r0
 80022a2:	4402      	add	r2, r0
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d100      	bne.n	80022aa <memset+0xa>
 80022a8:	4770      	bx	lr
 80022aa:	f803 1b01 	strb.w	r1, [r3], #1
 80022ae:	e7f9      	b.n	80022a4 <memset+0x4>

080022b0 <_init>:
 80022b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b2:	bf00      	nop
 80022b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022b6:	bc08      	pop	{r3}
 80022b8:	469e      	mov	lr, r3
 80022ba:	4770      	bx	lr

080022bc <_fini>:
 80022bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022be:	bf00      	nop
 80022c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022c2:	bc08      	pop	{r3}
 80022c4:	469e      	mov	lr, r3
 80022c6:	4770      	bx	lr
