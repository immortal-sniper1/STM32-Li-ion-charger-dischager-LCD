
STM32_BMS_meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000311c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003258  08003258  00013258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800327c  0800327c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800327c  0800327c  0001327c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003284  08003284  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003284  08003284  00013284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003288  08003288  00013288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800328c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000530  2000000c  08003298  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000053c  08003298  0002053c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a99  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002444  00000000  00000000  00030ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  00032f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  00033ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014e78  00000000  00000000  00034dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000121b2  00000000  00000000  00049c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084314  00000000  00000000  0005bdf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0106  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042d8  00000000  00000000  000e0158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08003240 	.word	0x08003240

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08003240 	.word	0x08003240

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000488:	f000 fcf9 	bl	8000e7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048c:	f000 f816 	bl	80004bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000490:	f000 fa46 	bl	8000920 <MX_GPIO_Init>
  MX_DAC_Init();
 8000494:	f000 f8d6 	bl	8000644 <MX_DAC_Init>
  MX_SPI1_Init();
 8000498:	f000 f98a 	bl	80007b0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800049c:	f000 f9f4 	bl	8000888 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80004a0:	f000 fa1c 	bl	80008dc <MX_USB_PCD_Init>
  MX_ADC_Init();
 80004a4:	f000 f876 	bl	8000594 <MX_ADC_Init>
  MX_I2C1_Init();
 80004a8:	f000 f900 	bl	80006ac <MX_I2C1_Init>
  MX_I2C2_Init();
 80004ac:	f000 f92c 	bl	8000708 <MX_I2C2_Init>
  MX_RTC_Init();
 80004b0:	f000 f958 	bl	8000764 <MX_RTC_Init>
  MX_SPI2_Init();
 80004b4:	f000 f9b2 	bl	800081c <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <main+0x34>
	...

080004bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b094      	sub	sp, #80	; 0x50
 80004c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c2:	f107 031c 	add.w	r3, r7, #28
 80004c6:	2234      	movs	r2, #52	; 0x34
 80004c8:	2100      	movs	r1, #0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f002 feb0 	bl	8003230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d0:	f107 0308 	add.w	r3, r7, #8
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
 80004de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004e0:	463b      	mov	r3, r7
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004e8:	4b29      	ldr	r3, [pc, #164]	; (8000590 <SystemClock_Config+0xd4>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80004f0:	4a27      	ldr	r2, [pc, #156]	; (8000590 <SystemClock_Config+0xd4>)
 80004f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004f6:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80004f8:	230b      	movs	r3, #11
 80004fa:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004fc:	2301      	movs	r3, #1
 80004fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000500:	2301      	movs	r3, #1
 8000502:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000504:	2310      	movs	r3, #16
 8000506:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000508:	2301      	movs	r3, #1
 800050a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050c:	2302      	movs	r3, #2
 800050e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000510:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000514:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000516:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800051a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800051c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000520:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000522:	f107 031c 	add.w	r3, r7, #28
 8000526:	4618      	mov	r0, r3
 8000528:	f001 fca4 	bl	8001e74 <HAL_RCC_OscConfig>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000532:	f000 fa3d 	bl	80009b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000536:	230f      	movs	r3, #15
 8000538:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053a:	2303      	movs	r3, #3
 800053c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000546:	2300      	movs	r3, #0
 8000548:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800054a:	f107 0308 	add.w	r3, r7, #8
 800054e:	2101      	movs	r1, #1
 8000550:	4618      	mov	r0, r3
 8000552:	f001 ffbf 	bl	80024d4 <HAL_RCC_ClockConfig>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800055c:	f000 fa28 	bl	80009b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000560:	2301      	movs	r3, #1
 8000562:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000564:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000568:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800056a:	463b      	mov	r3, r7
 800056c:	4618      	mov	r0, r3
 800056e:	f002 faab 	bl	8002ac8 <HAL_RCCEx_PeriphCLKConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000578:	f000 fa1a 	bl	80009b0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 800057c:	2200      	movs	r2, #0
 800057e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000582:	2000      	movs	r0, #0
 8000584:	f002 f8da 	bl	800273c <HAL_RCC_MCOConfig>
}
 8000588:	bf00      	nop
 800058a:	3750      	adds	r7, #80	; 0x50
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40007000 	.word	0x40007000

08000594 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80005a4:	4b25      	ldr	r3, [pc, #148]	; (800063c <MX_ADC_Init+0xa8>)
 80005a6:	4a26      	ldr	r2, [pc, #152]	; (8000640 <MX_ADC_Init+0xac>)
 80005a8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005aa:	4b24      	ldr	r3, [pc, #144]	; (800063c <MX_ADC_Init+0xa8>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80005b0:	4b22      	ldr	r3, [pc, #136]	; (800063c <MX_ADC_Init+0xa8>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b6:	4b21      	ldr	r3, [pc, #132]	; (800063c <MX_ADC_Init+0xa8>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <MX_ADC_Init+0xa8>)
 80005be:	2200      	movs	r2, #0
 80005c0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80005c2:	4b1e      	ldr	r3, [pc, #120]	; (800063c <MX_ADC_Init+0xa8>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80005c8:	4b1c      	ldr	r3, [pc, #112]	; (800063c <MX_ADC_Init+0xa8>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80005ce:	4b1b      	ldr	r3, [pc, #108]	; (800063c <MX_ADC_Init+0xa8>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80005d4:	4b19      	ldr	r3, [pc, #100]	; (800063c <MX_ADC_Init+0xa8>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80005da:	4b18      	ldr	r3, [pc, #96]	; (800063c <MX_ADC_Init+0xa8>)
 80005dc:	2200      	movs	r2, #0
 80005de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 80005e2:	4b16      	ldr	r3, [pc, #88]	; (800063c <MX_ADC_Init+0xa8>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_ADC_Init+0xa8>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <MX_ADC_Init+0xa8>)
 80005f2:	2210      	movs	r2, #16
 80005f4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_ADC_Init+0xa8>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_ADC_Init+0xa8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000604:	480d      	ldr	r0, [pc, #52]	; (800063c <MX_ADC_Init+0xa8>)
 8000606:	f000 fca9 	bl	8000f5c <HAL_ADC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8000610:	f000 f9ce 	bl	80009b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000614:	2303      	movs	r3, #3
 8000616:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000618:	2301      	movs	r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	4619      	mov	r1, r3
 8000624:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_ADC_Init+0xa8>)
 8000626:	f000 fddf 	bl	80011e8 <HAL_ADC_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8000630:	f000 f9be 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000028 	.word	0x20000028
 8000640:	40012400 	.word	0x40012400

08000644 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800064a:	463b      	mov	r3, r7
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_DAC_Init+0x60>)
 8000654:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <MX_DAC_Init+0x64>)
 8000656:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000658:	4812      	ldr	r0, [pc, #72]	; (80006a4 <MX_DAC_Init+0x60>)
 800065a:	f000 fff8 	bl	800164e <HAL_DAC_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000664:	f000 f9a4 	bl	80009b0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000668:	2300      	movs	r3, #0
 800066a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000670:	463b      	mov	r3, r7
 8000672:	2200      	movs	r2, #0
 8000674:	4619      	mov	r1, r3
 8000676:	480b      	ldr	r0, [pc, #44]	; (80006a4 <MX_DAC_Init+0x60>)
 8000678:	f001 f80b 	bl	8001692 <HAL_DAC_ConfigChannel>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000682:	f000 f995 	bl	80009b0 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000686:	463b      	mov	r3, r7
 8000688:	2210      	movs	r2, #16
 800068a:	4619      	mov	r1, r3
 800068c:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_DAC_Init+0x60>)
 800068e:	f001 f800 	bl	8001692 <HAL_DAC_ConfigChannel>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000698:	f000 f98a 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	2000007c 	.word	0x2000007c
 80006a8:	40007400 	.word	0x40007400

080006ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_I2C1_Init+0x50>)
 80006b2:	4a13      	ldr	r2, [pc, #76]	; (8000700 <MX_I2C1_Init+0x54>)
 80006b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_I2C1_Init+0x50>)
 80006b8:	4a12      	ldr	r2, [pc, #72]	; (8000704 <MX_I2C1_Init+0x58>)
 80006ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_I2C1_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_I2C1_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_I2C1_Init+0x50>)
 80006ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <MX_I2C1_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_I2C1_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <MX_I2C1_Init+0x50>)
 80006ea:	f001 f9a1 	bl	8001a30 <HAL_I2C_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006f4:	f000 f95c 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000090 	.word	0x20000090
 8000700:	40005400 	.word	0x40005400
 8000704:	000186a0 	.word	0x000186a0

08000708 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_I2C2_Init+0x50>)
 800070e:	4a13      	ldr	r2, [pc, #76]	; (800075c <MX_I2C2_Init+0x54>)
 8000710:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_I2C2_Init+0x50>)
 8000714:	4a12      	ldr	r2, [pc, #72]	; (8000760 <MX_I2C2_Init+0x58>)
 8000716:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_I2C2_Init+0x50>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_I2C2_Init+0x50>)
 8000720:	2200      	movs	r2, #0
 8000722:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_I2C2_Init+0x50>)
 8000726:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800072a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800072c:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <MX_I2C2_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_I2C2_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000738:	4b07      	ldr	r3, [pc, #28]	; (8000758 <MX_I2C2_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800073e:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_I2C2_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <MX_I2C2_Init+0x50>)
 8000746:	f001 f973 	bl	8001a30 <HAL_I2C_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000750:	f000 f92e 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	200000e4 	.word	0x200000e4
 800075c:	40005800 	.word	0x40005800
 8000760:	000186a0 	.word	0x000186a0

08000764 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_RTC_Init+0x44>)
 800076a:	4a10      	ldr	r2, [pc, #64]	; (80007ac <MX_RTC_Init+0x48>)
 800076c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_RTC_Init+0x44>)
 8000770:	2200      	movs	r2, #0
 8000772:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_RTC_Init+0x44>)
 8000776:	227f      	movs	r2, #127	; 0x7f
 8000778:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_RTC_Init+0x44>)
 800077c:	22ff      	movs	r2, #255	; 0xff
 800077e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_RTC_Init+0x44>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_RTC_Init+0x44>)
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_RTC_Init+0x44>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_RTC_Init+0x44>)
 8000794:	f002 fa66 	bl	8002c64 <HAL_RTC_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800079e:	f000 f907 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000138 	.word	0x20000138
 80007ac:	40002800 	.word	0x40002800

080007b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007b4:	4b17      	ldr	r3, [pc, #92]	; (8000814 <MX_SPI1_Init+0x64>)
 80007b6:	4a18      	ldr	r2, [pc, #96]	; (8000818 <MX_SPI1_Init+0x68>)
 80007b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ba:	4b16      	ldr	r3, [pc, #88]	; (8000814 <MX_SPI1_Init+0x64>)
 80007bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_SPI1_Init+0x64>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_SPI1_Init+0x64>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_SPI1_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_SPI1_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_SPI1_Init+0x64>)
 80007dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_SPI1_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <MX_SPI1_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_SPI1_Init+0x64>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <MX_SPI1_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_SPI1_Init+0x64>)
 80007fc:	220a      	movs	r2, #10
 80007fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <MX_SPI1_Init+0x64>)
 8000802:	f002 fb09 	bl	8002e18 <HAL_SPI_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800080c:	f000 f8d0 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000158 	.word	0x20000158
 8000818:	40013000 	.word	0x40013000

0800081c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000820:	4b17      	ldr	r3, [pc, #92]	; (8000880 <MX_SPI2_Init+0x64>)
 8000822:	4a18      	ldr	r2, [pc, #96]	; (8000884 <MX_SPI2_Init+0x68>)
 8000824:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000826:	4b16      	ldr	r3, [pc, #88]	; (8000880 <MX_SPI2_Init+0x64>)
 8000828:	f44f 7282 	mov.w	r2, #260	; 0x104
 800082c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_SPI2_Init+0x64>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <MX_SPI2_Init+0x64>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_SPI2_Init+0x64>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_SPI2_Init+0x64>)
 8000842:	2200      	movs	r2, #0
 8000844:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_SPI2_Init+0x64>)
 8000848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800084c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_SPI2_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <MX_SPI2_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_SPI2_Init+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <MX_SPI2_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_SPI2_Init+0x64>)
 8000868:	220a      	movs	r2, #10
 800086a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800086c:	4804      	ldr	r0, [pc, #16]	; (8000880 <MX_SPI2_Init+0x64>)
 800086e:	f002 fad3 	bl	8002e18 <HAL_SPI_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000878:	f000 f89a 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200001b0 	.word	0x200001b0
 8000884:	40003800 	.word	0x40003800

08000888 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_USART1_UART_Init+0x4c>)
 800088e:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <MX_USART1_UART_Init+0x50>)
 8000890:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <MX_USART1_UART_Init+0x4c>)
 8000894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000898:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_USART1_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_USART1_UART_Init+0x4c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MX_USART1_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_USART1_UART_Init+0x4c>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MX_USART1_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_USART1_UART_Init+0x4c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_USART1_UART_Init+0x4c>)
 80008c0:	f002 fb26 	bl	8002f10 <HAL_UART_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008ca:	f000 f871 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000208 	.word	0x20000208
 80008d8:	40013800 	.word	0x40013800

080008dc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80008e0:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <MX_USB_PCD_Init+0x3c>)
 80008e2:	4a0e      	ldr	r2, [pc, #56]	; (800091c <MX_USB_PCD_Init+0x40>)
 80008e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_USB_PCD_Init+0x3c>)
 80008e8:	2208      	movs	r2, #8
 80008ea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80008ec:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <MX_USB_PCD_Init+0x3c>)
 80008ee:	2202      	movs	r2, #2
 80008f0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_USB_PCD_Init+0x3c>)
 80008f4:	2202      	movs	r2, #2
 80008f6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80008f8:	4b07      	ldr	r3, [pc, #28]	; (8000918 <MX_USB_PCD_Init+0x3c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_USB_PCD_Init+0x3c>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000904:	4804      	ldr	r0, [pc, #16]	; (8000918 <MX_USB_PCD_Init+0x3c>)
 8000906:	f001 f9d7 	bl	8001cb8 <HAL_PCD_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000910:	f000 f84e 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	2000024c 	.word	0x2000024c
 800091c:	40005c00 	.word	0x40005c00

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <MX_GPIO_Init+0x88>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	4a1b      	ldr	r2, [pc, #108]	; (80009a8 <MX_GPIO_Init+0x88>)
 800093c:	f043 0320 	orr.w	r3, r3, #32
 8000940:	61d3      	str	r3, [r2, #28]
 8000942:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <MX_GPIO_Init+0x88>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	f003 0320 	and.w	r3, r3, #32
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <MX_GPIO_Init+0x88>)
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	4a15      	ldr	r2, [pc, #84]	; (80009a8 <MX_GPIO_Init+0x88>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	61d3      	str	r3, [r2, #28]
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <MX_GPIO_Init+0x88>)
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_GPIO_Init+0x88>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	4a0f      	ldr	r2, [pc, #60]	; (80009a8 <MX_GPIO_Init+0x88>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	61d3      	str	r3, [r2, #28]
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <MX_GPIO_Init+0x88>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800097e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000982:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2302      	movs	r3, #2
 8000986:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000990:	2300      	movs	r3, #0
 8000992:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	4619      	mov	r1, r3
 800099a:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_GPIO_Init+0x8c>)
 800099c:	f000 fec8 	bl	8001730 <HAL_GPIO_Init>

}
 80009a0:	bf00      	nop
 80009a2:	3720      	adds	r7, #32
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020000 	.word	0x40020000

080009b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b4:	b672      	cpsid	i
}
 80009b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <Error_Handler+0x8>
	...

080009bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <HAL_MspInit+0x58>)
 80009c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c6:	4a13      	ldr	r2, [pc, #76]	; (8000a14 <HAL_MspInit+0x58>)
 80009c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009cc:	6253      	str	r3, [r2, #36]	; 0x24
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <HAL_MspInit+0x58>)
 80009d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <HAL_MspInit+0x58>)
 80009dc:	6a1b      	ldr	r3, [r3, #32]
 80009de:	4a0d      	ldr	r2, [pc, #52]	; (8000a14 <HAL_MspInit+0x58>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6213      	str	r3, [r2, #32]
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <HAL_MspInit+0x58>)
 80009e8:	6a1b      	ldr	r3, [r3, #32]
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <HAL_MspInit+0x58>)
 80009f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f6:	4a07      	ldr	r2, [pc, #28]	; (8000a14 <HAL_MspInit+0x58>)
 80009f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009fc:	6253      	str	r3, [r2, #36]	; 0x24
 80009fe:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <HAL_MspInit+0x58>)
 8000a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	40023800 	.word	0x40023800

08000a18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	; 0x28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a15      	ldr	r2, [pc, #84]	; (8000a8c <HAL_ADC_MspInit+0x74>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d123      	bne.n	8000a82 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <HAL_ADC_MspInit+0x78>)
 8000a3c:	6a1b      	ldr	r3, [r3, #32]
 8000a3e:	4a14      	ldr	r2, [pc, #80]	; (8000a90 <HAL_ADC_MspInit+0x78>)
 8000a40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a44:	6213      	str	r3, [r2, #32]
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_ADC_MspInit+0x78>)
 8000a48:	6a1b      	ldr	r3, [r3, #32]
 8000a4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <HAL_ADC_MspInit+0x78>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	4a0e      	ldr	r2, [pc, #56]	; (8000a90 <HAL_ADC_MspInit+0x78>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	61d3      	str	r3, [r2, #28]
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <HAL_ADC_MspInit+0x78>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000a6a:	230f      	movs	r3, #15
 8000a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <HAL_ADC_MspInit+0x7c>)
 8000a7e:	f000 fe57 	bl	8001730 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	; 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40012400 	.word	0x40012400
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020000 	.word	0x40020000

08000a98 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a15      	ldr	r2, [pc, #84]	; (8000b0c <HAL_DAC_MspInit+0x74>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d123      	bne.n	8000b02 <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <HAL_DAC_MspInit+0x78>)
 8000abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000abe:	4a14      	ldr	r2, [pc, #80]	; (8000b10 <HAL_DAC_MspInit+0x78>)
 8000ac0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ac4:	6253      	str	r3, [r2, #36]	; 0x24
 8000ac6:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_DAC_MspInit+0x78>)
 8000ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <HAL_DAC_MspInit+0x78>)
 8000ad4:	69db      	ldr	r3, [r3, #28]
 8000ad6:	4a0e      	ldr	r2, [pc, #56]	; (8000b10 <HAL_DAC_MspInit+0x78>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	61d3      	str	r3, [r2, #28]
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <HAL_DAC_MspInit+0x78>)
 8000ae0:	69db      	ldr	r3, [r3, #28]
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000aea:	2330      	movs	r3, #48	; 0x30
 8000aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aee:	2303      	movs	r3, #3
 8000af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	4805      	ldr	r0, [pc, #20]	; (8000b14 <HAL_DAC_MspInit+0x7c>)
 8000afe:	f000 fe17 	bl	8001730 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000b02:	bf00      	nop
 8000b04:	3728      	adds	r7, #40	; 0x28
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40007400 	.word	0x40007400
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020000 	.word	0x40020000

08000b18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08c      	sub	sp, #48	; 0x30
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a2e      	ldr	r2, [pc, #184]	; (8000bf0 <HAL_I2C_MspInit+0xd8>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d128      	bne.n	8000b8c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3a:	4b2e      	ldr	r3, [pc, #184]	; (8000bf4 <HAL_I2C_MspInit+0xdc>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	4a2d      	ldr	r2, [pc, #180]	; (8000bf4 <HAL_I2C_MspInit+0xdc>)
 8000b40:	f043 0302 	orr.w	r3, r3, #2
 8000b44:	61d3      	str	r3, [r2, #28]
 8000b46:	4b2b      	ldr	r3, [pc, #172]	; (8000bf4 <HAL_I2C_MspInit+0xdc>)
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	61bb      	str	r3, [r7, #24]
 8000b50:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b52:	23c0      	movs	r3, #192	; 0xc0
 8000b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b56:	2312      	movs	r3, #18
 8000b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b62:	2304      	movs	r3, #4
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4822      	ldr	r0, [pc, #136]	; (8000bf8 <HAL_I2C_MspInit+0xe0>)
 8000b6e:	f000 fddf 	bl	8001730 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b72:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <HAL_I2C_MspInit+0xdc>)
 8000b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b76:	4a1f      	ldr	r2, [pc, #124]	; (8000bf4 <HAL_I2C_MspInit+0xdc>)
 8000b78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b7c:	6253      	str	r3, [r2, #36]	; 0x24
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <HAL_I2C_MspInit+0xdc>)
 8000b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000b8a:	e02d      	b.n	8000be8 <HAL_I2C_MspInit+0xd0>
  else if(hi2c->Instance==I2C2)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a1a      	ldr	r2, [pc, #104]	; (8000bfc <HAL_I2C_MspInit+0xe4>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d128      	bne.n	8000be8 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <HAL_I2C_MspInit+0xdc>)
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	4a16      	ldr	r2, [pc, #88]	; (8000bf4 <HAL_I2C_MspInit+0xdc>)
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	61d3      	str	r3, [r2, #28]
 8000ba2:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <HAL_I2C_MspInit+0xdc>)
 8000ba4:	69db      	ldr	r3, [r3, #28]
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb4:	2312      	movs	r3, #18
 8000bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480b      	ldr	r0, [pc, #44]	; (8000bf8 <HAL_I2C_MspInit+0xe0>)
 8000bcc:	f000 fdb0 	bl	8001730 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <HAL_I2C_MspInit+0xdc>)
 8000bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd4:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <HAL_I2C_MspInit+0xdc>)
 8000bd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bda:	6253      	str	r3, [r2, #36]	; 0x24
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <HAL_I2C_MspInit+0xdc>)
 8000bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3730      	adds	r7, #48	; 0x30
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40005400 	.word	0x40005400
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020400 	.word	0x40020400
 8000bfc:	40005800 	.word	0x40005800

08000c00 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <HAL_RTC_MspInit+0x24>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d102      	bne.n	8000c18 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <HAL_RTC_MspInit+0x28>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40002800 	.word	0x40002800
 8000c28:	424706d8 	.word	0x424706d8

08000c2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08c      	sub	sp, #48	; 0x30
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 031c 	add.w	r3, r7, #28
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a2e      	ldr	r2, [pc, #184]	; (8000d04 <HAL_SPI_MspInit+0xd8>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d128      	bne.n	8000ca0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c4e:	4b2e      	ldr	r3, [pc, #184]	; (8000d08 <HAL_SPI_MspInit+0xdc>)
 8000c50:	6a1b      	ldr	r3, [r3, #32]
 8000c52:	4a2d      	ldr	r2, [pc, #180]	; (8000d08 <HAL_SPI_MspInit+0xdc>)
 8000c54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c58:	6213      	str	r3, [r2, #32]
 8000c5a:	4b2b      	ldr	r3, [pc, #172]	; (8000d08 <HAL_SPI_MspInit+0xdc>)
 8000c5c:	6a1b      	ldr	r3, [r3, #32]
 8000c5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c62:	61bb      	str	r3, [r7, #24]
 8000c64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c66:	4b28      	ldr	r3, [pc, #160]	; (8000d08 <HAL_SPI_MspInit+0xdc>)
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	4a27      	ldr	r2, [pc, #156]	; (8000d08 <HAL_SPI_MspInit+0xdc>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	61d3      	str	r3, [r2, #28]
 8000c72:	4b25      	ldr	r3, [pc, #148]	; (8000d08 <HAL_SPI_MspInit+0xdc>)
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000c7e:	2338      	movs	r3, #56	; 0x38
 8000c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c8e:	2305      	movs	r3, #5
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	4619      	mov	r1, r3
 8000c98:	481c      	ldr	r0, [pc, #112]	; (8000d0c <HAL_SPI_MspInit+0xe0>)
 8000c9a:	f000 fd49 	bl	8001730 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c9e:	e02d      	b.n	8000cfc <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI2)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a1a      	ldr	r2, [pc, #104]	; (8000d10 <HAL_SPI_MspInit+0xe4>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d128      	bne.n	8000cfc <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000caa:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <HAL_SPI_MspInit+0xdc>)
 8000cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cae:	4a16      	ldr	r2, [pc, #88]	; (8000d08 <HAL_SPI_MspInit+0xdc>)
 8000cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb4:	6253      	str	r3, [r2, #36]	; 0x24
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <HAL_SPI_MspInit+0xdc>)
 8000cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_SPI_MspInit+0xdc>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	4a10      	ldr	r2, [pc, #64]	; (8000d08 <HAL_SPI_MspInit+0xdc>)
 8000cc8:	f043 0302 	orr.w	r3, r3, #2
 8000ccc:	61d3      	str	r3, [r2, #28]
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <HAL_SPI_MspInit+0xdc>)
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000cda:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cec:	2305      	movs	r3, #5
 8000cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf0:	f107 031c 	add.w	r3, r7, #28
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <HAL_SPI_MspInit+0xe0>)
 8000cf8:	f000 fd1a 	bl	8001730 <HAL_GPIO_Init>
}
 8000cfc:	bf00      	nop
 8000cfe:	3730      	adds	r7, #48	; 0x30
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40013000 	.word	0x40013000
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020400 	.word	0x40020400
 8000d10:	40003800 	.word	0x40003800

08000d14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	; 0x28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a17      	ldr	r2, [pc, #92]	; (8000d90 <HAL_UART_MspInit+0x7c>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d128      	bne.n	8000d88 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d36:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <HAL_UART_MspInit+0x80>)
 8000d38:	6a1b      	ldr	r3, [r3, #32]
 8000d3a:	4a16      	ldr	r2, [pc, #88]	; (8000d94 <HAL_UART_MspInit+0x80>)
 8000d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d40:	6213      	str	r3, [r2, #32]
 8000d42:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <HAL_UART_MspInit+0x80>)
 8000d44:	6a1b      	ldr	r3, [r3, #32]
 8000d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <HAL_UART_MspInit+0x80>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	4a10      	ldr	r2, [pc, #64]	; (8000d94 <HAL_UART_MspInit+0x80>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	61d3      	str	r3, [r2, #28]
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <HAL_UART_MspInit+0x80>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d78:	2307      	movs	r3, #7
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	4805      	ldr	r0, [pc, #20]	; (8000d98 <HAL_UART_MspInit+0x84>)
 8000d84:	f000 fcd4 	bl	8001730 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d88:	bf00      	nop
 8000d8a:	3728      	adds	r7, #40	; 0x28
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40013800 	.word	0x40013800
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40020000 	.word	0x40020000

08000d9c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a09      	ldr	r2, [pc, #36]	; (8000dd0 <HAL_PCD_MspInit+0x34>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d10b      	bne.n	8000dc6 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_PCD_MspInit+0x38>)
 8000db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db2:	4a08      	ldr	r2, [pc, #32]	; (8000dd4 <HAL_PCD_MspInit+0x38>)
 8000db4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000db8:	6253      	str	r3, [r2, #36]	; 0x24
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_PCD_MspInit+0x38>)
 8000dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	40005c00 	.word	0x40005c00
 8000dd4:	40023800 	.word	0x40023800

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <NMI_Handler+0x4>

08000dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <MemManage_Handler+0x4>

08000dea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr

08000e02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr

08000e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr

08000e1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1e:	f000 f881 	bl	8000f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
	...

08000e34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e34:	480c      	ldr	r0, [pc, #48]	; (8000e68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e36:	490d      	ldr	r1, [pc, #52]	; (8000e6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e38:	4a0d      	ldr	r2, [pc, #52]	; (8000e70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e3c:	e002      	b.n	8000e44 <LoopCopyDataInit>

08000e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e42:	3304      	adds	r3, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e48:	d3f9      	bcc.n	8000e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e4c:	4c0a      	ldr	r4, [pc, #40]	; (8000e78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e50:	e001      	b.n	8000e56 <LoopFillZerobss>

08000e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e54:	3204      	adds	r2, #4

08000e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e58:	d3fb      	bcc.n	8000e52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e5a:	f7ff ffe4 	bl	8000e26 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f002 f9c3 	bl	80031e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e62:	f7ff fb0f 	bl	8000484 <main>
  bx lr
 8000e66:	4770      	bx	lr
  ldr r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e70:	0800328c 	.word	0x0800328c
  ldr r2, =_sbss
 8000e74:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e78:	2000053c 	.word	0x2000053c

08000e7c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC1_IRQHandler>

08000e7e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e84:	2300      	movs	r3, #0
 8000e86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e88:	2003      	movs	r0, #3
 8000e8a:	f000 fbad 	bl	80015e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e8e:	200f      	movs	r0, #15
 8000e90:	f000 f80e 	bl	8000eb0 <HAL_InitTick>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d002      	beq.n	8000ea0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	71fb      	strb	r3, [r7, #7]
 8000e9e:	e001      	b.n	8000ea4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ea0:	f7ff fd8c 	bl	80009bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ebc:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <HAL_InitTick+0x68>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d022      	beq.n	8000f0a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ec4:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <HAL_InitTick+0x6c>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <HAL_InitTick+0x68>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ed0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 fbac 	bl	8001636 <HAL_SYSTICK_Config>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d10f      	bne.n	8000f04 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b0f      	cmp	r3, #15
 8000ee8:	d809      	bhi.n	8000efe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eea:	2200      	movs	r2, #0
 8000eec:	6879      	ldr	r1, [r7, #4]
 8000eee:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef2:	f000 fb84 	bl	80015fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <HAL_InitTick+0x70>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	e007      	b.n	8000f0e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	73fb      	strb	r3, [r7, #15]
 8000f02:	e004      	b.n	8000f0e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	73fb      	strb	r3, [r7, #15]
 8000f08:	e001      	b.n	8000f0e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	20000004 	.word	0x20000004

08000f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <HAL_IncTick+0x1c>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <HAL_IncTick+0x20>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4413      	add	r3, r2
 8000f32:	4a03      	ldr	r2, [pc, #12]	; (8000f40 <HAL_IncTick+0x1c>)
 8000f34:	6013      	str	r3, [r2, #0]
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000538 	.word	0x20000538
 8000f44:	20000008 	.word	0x20000008

08000f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f4c:	4b02      	ldr	r3, [pc, #8]	; (8000f58 <HAL_GetTick+0x10>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	20000538 	.word	0x20000538

08000f5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08e      	sub	sp, #56	; 0x38
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f64:	2300      	movs	r3, #0
 8000f66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e127      	b.n	80011cc <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	691b      	ldr	r3, [r3, #16]
 8000f80:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d115      	bne.n	8000fb6 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f98:	4b8e      	ldr	r3, [pc, #568]	; (80011d4 <HAL_ADC_Init+0x278>)
 8000f9a:	6a1b      	ldr	r3, [r3, #32]
 8000f9c:	4a8d      	ldr	r2, [pc, #564]	; (80011d4 <HAL_ADC_Init+0x278>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	6213      	str	r3, [r2, #32]
 8000fa4:	4b8b      	ldr	r3, [pc, #556]	; (80011d4 <HAL_ADC_Init+0x278>)
 8000fa6:	6a1b      	ldr	r3, [r3, #32]
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff fd31 	bl	8000a18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	f003 0310 	and.w	r3, r3, #16
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f040 80ff 	bne.w	80011c2 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fcc:	f023 0302 	bic.w	r3, r3, #2
 8000fd0:	f043 0202 	orr.w	r2, r3, #2
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8000fd8:	4b7f      	ldr	r3, [pc, #508]	; (80011d8 <HAL_ADC_Init+0x27c>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	497c      	ldr	r1, [pc, #496]	; (80011d8 <HAL_ADC_Init+0x27c>)
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000ff2:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001000:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001002:	6a3b      	ldr	r3, [r7, #32]
 8001004:	fa93 f3a3 	rbit	r3, r3
 8001008:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	fab3 f383 	clz	r3, r3
 8001010:	b2db      	uxtb	r3, r3
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001016:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800101c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001024:	4619      	mov	r1, r3
 8001026:	2302      	movs	r3, #2
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102c:	fa93 f3a3 	rbit	r3, r3
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	fab3 f383 	clz	r3, r3
 8001038:	b2db      	uxtb	r3, r3
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800103e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001040:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001042:	4313      	orrs	r3, r2
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800104a:	2b10      	cmp	r3, #16
 800104c:	d007      	beq.n	800105e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001056:	4313      	orrs	r3, r2
 8001058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800105a:	4313      	orrs	r3, r2
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001068:	2b40      	cmp	r3, #64	; 0x40
 800106a:	d04f      	beq.n	800110c <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001072:	4313      	orrs	r3, r2
 8001074:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800107e:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	6912      	ldr	r2, [r2, #16]
 8001084:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001088:	d003      	beq.n	8001092 <HAL_ADC_Init+0x136>
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	6912      	ldr	r2, [r2, #16]
 800108e:	2a01      	cmp	r2, #1
 8001090:	d102      	bne.n	8001098 <HAL_ADC_Init+0x13c>
 8001092:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001096:	e000      	b.n	800109a <HAL_ADC_Init+0x13e>
 8001098:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800109a:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800109c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800109e:	4313      	orrs	r3, r2
 80010a0:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d125      	bne.n	80010f8 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d114      	bne.n	80010e0 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	3b01      	subs	r3, #1
 80010bc:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80010c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	fa92 f2a2 	rbit	r2, r2
 80010c8:	617a      	str	r2, [r7, #20]
  return result;
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	fab2 f282 	clz	r2, r2
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	4093      	lsls	r3, r2
 80010d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010da:	4313      	orrs	r3, r2
 80010dc:	633b      	str	r3, [r7, #48]	; 0x30
 80010de:	e00b      	b.n	80010f8 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e4:	f043 0220 	orr.w	r2, r3, #32
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010f0:	f043 0201 	orr.w	r2, r3, #1
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	4b37      	ldr	r3, [pc, #220]	; (80011dc <HAL_ADC_Init+0x280>)
 8001100:	4013      	ands	r3, r2
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	6812      	ldr	r2, [r2, #0]
 8001106:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001108:	430b      	orrs	r3, r1
 800110a:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	4b33      	ldr	r3, [pc, #204]	; (80011e0 <HAL_ADC_Init+0x284>)
 8001114:	4013      	ands	r3, r2
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	6812      	ldr	r2, [r2, #0]
 800111a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800111c:	430b      	orrs	r3, r1
 800111e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001128:	d003      	beq.n	8001132 <HAL_ADC_Init+0x1d6>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d119      	bne.n	8001166 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001138:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001140:	3b01      	subs	r3, #1
 8001142:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001146:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	fa92 f2a2 	rbit	r2, r2
 800114e:	60fa      	str	r2, [r7, #12]
  return result;
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	fab2 f282 	clz	r2, r2
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	fa03 f202 	lsl.w	r2, r3, r2
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	430a      	orrs	r2, r1
 8001162:	631a      	str	r2, [r3, #48]	; 0x30
 8001164:	e007      	b.n	8001176 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001174:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	689a      	ldr	r2, [r3, #8]
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <HAL_ADC_Init+0x288>)
 800117e:	4013      	ands	r3, r2
 8001180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001182:	429a      	cmp	r2, r3
 8001184:	d10b      	bne.n	800119e <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001190:	f023 0303 	bic.w	r3, r3, #3
 8001194:	f043 0201 	orr.w	r2, r3, #1
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	64da      	str	r2, [r3, #76]	; 0x4c
 800119c:	e014      	b.n	80011c8 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	f023 0312 	bic.w	r3, r3, #18
 80011a6:	f043 0210 	orr.w	r2, r3, #16
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011b2:	f043 0201 	orr.w	r2, r3, #1
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80011c0:	e002      	b.n	80011c8 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3738      	adds	r7, #56	; 0x38
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40012700 	.word	0x40012700
 80011dc:	fcfc16ff 	.word	0xfcfc16ff
 80011e0:	c0fff18d 	.word	0xc0fff18d
 80011e4:	bf80fffe 	.word	0xbf80fffe

080011e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011f2:	2300      	movs	r3, #0
 80011f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001200:	2b01      	cmp	r3, #1
 8001202:	d101      	bne.n	8001208 <HAL_ADC_ConfigChannel+0x20>
 8001204:	2302      	movs	r3, #2
 8001206:	e134      	b.n	8001472 <HAL_ADC_ConfigChannel+0x28a>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2201      	movs	r2, #1
 800120c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b06      	cmp	r3, #6
 8001216:	d81c      	bhi.n	8001252 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	4613      	mov	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	3b05      	subs	r3, #5
 800122a:	221f      	movs	r2, #31
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	4019      	ands	r1, r3
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	6818      	ldr	r0, [r3, #0]
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	3b05      	subs	r3, #5
 8001244:	fa00 f203 	lsl.w	r2, r0, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	430a      	orrs	r2, r1
 800124e:	641a      	str	r2, [r3, #64]	; 0x40
 8001250:	e07e      	b.n	8001350 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2b0c      	cmp	r3, #12
 8001258:	d81c      	bhi.n	8001294 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	3b23      	subs	r3, #35	; 0x23
 800126c:	221f      	movs	r2, #31
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	4019      	ands	r1, r3
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685a      	ldr	r2, [r3, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	3b23      	subs	r3, #35	; 0x23
 8001286:	fa00 f203 	lsl.w	r2, r0, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	430a      	orrs	r2, r1
 8001290:	63da      	str	r2, [r3, #60]	; 0x3c
 8001292:	e05d      	b.n	8001350 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b12      	cmp	r3, #18
 800129a:	d81c      	bhi.n	80012d6 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	3b41      	subs	r3, #65	; 0x41
 80012ae:	221f      	movs	r2, #31
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	4019      	ands	r1, r3
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	6818      	ldr	r0, [r3, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	4613      	mov	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	3b41      	subs	r3, #65	; 0x41
 80012c8:	fa00 f203 	lsl.w	r2, r0, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	430a      	orrs	r2, r1
 80012d2:	639a      	str	r2, [r3, #56]	; 0x38
 80012d4:	e03c      	b.n	8001350 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b18      	cmp	r3, #24
 80012dc:	d81c      	bhi.n	8001318 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685a      	ldr	r2, [r3, #4]
 80012e8:	4613      	mov	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4413      	add	r3, r2
 80012ee:	3b5f      	subs	r3, #95	; 0x5f
 80012f0:	221f      	movs	r2, #31
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	4019      	ands	r1, r3
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	3b5f      	subs	r3, #95	; 0x5f
 800130a:	fa00 f203 	lsl.w	r2, r0, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	430a      	orrs	r2, r1
 8001314:	635a      	str	r2, [r3, #52]	; 0x34
 8001316:	e01b      	b.n	8001350 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	4613      	mov	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	3b7d      	subs	r3, #125	; 0x7d
 800132a:	221f      	movs	r2, #31
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	4019      	ands	r1, r3
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	6818      	ldr	r0, [r3, #0]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	3b7d      	subs	r3, #125	; 0x7d
 8001344:	fa00 f203 	lsl.w	r2, r0, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	430a      	orrs	r2, r1
 800134e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b09      	cmp	r3, #9
 8001356:	d81a      	bhi.n	800138e <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6959      	ldr	r1, [r3, #20]
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	4613      	mov	r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4413      	add	r3, r2
 8001368:	2207      	movs	r2, #7
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	4019      	ands	r1, r3
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	6898      	ldr	r0, [r3, #8]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4613      	mov	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	4413      	add	r3, r2
 8001380:	fa00 f203 	lsl.w	r2, r0, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	430a      	orrs	r2, r1
 800138a:	615a      	str	r2, [r3, #20]
 800138c:	e042      	b.n	8001414 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b13      	cmp	r3, #19
 8001394:	d81c      	bhi.n	80013d0 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6919      	ldr	r1, [r3, #16]
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4613      	mov	r3, r2
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	4413      	add	r3, r2
 80013a6:	3b1e      	subs	r3, #30
 80013a8:	2207      	movs	r2, #7
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	4019      	ands	r1, r3
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	6898      	ldr	r0, [r3, #8]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	4613      	mov	r3, r2
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	4413      	add	r3, r2
 80013c0:	3b1e      	subs	r3, #30
 80013c2:	fa00 f203 	lsl.w	r2, r0, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	430a      	orrs	r2, r1
 80013cc:	611a      	str	r2, [r3, #16]
 80013ce:	e021      	b.n	8001414 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b1a      	cmp	r3, #26
 80013d6:	d81c      	bhi.n	8001412 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68d9      	ldr	r1, [r3, #12]
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	4613      	mov	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	3b3c      	subs	r3, #60	; 0x3c
 80013ea:	2207      	movs	r2, #7
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	4019      	ands	r1, r3
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	6898      	ldr	r0, [r3, #8]
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4613      	mov	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4413      	add	r3, r2
 8001402:	3b3c      	subs	r3, #60	; 0x3c
 8001404:	fa00 f203 	lsl.w	r2, r0, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	430a      	orrs	r2, r1
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	e000      	b.n	8001414 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001412:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b10      	cmp	r3, #16
 800141a:	d003      	beq.n	8001424 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001420:	2b11      	cmp	r3, #17
 8001422:	d121      	bne.n	8001468 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001424:	4b15      	ldr	r3, [pc, #84]	; (800147c <HAL_ADC_ConfigChannel+0x294>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d11b      	bne.n	8001468 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <HAL_ADC_ConfigChannel+0x294>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	4a11      	ldr	r2, [pc, #68]	; (800147c <HAL_ADC_ConfigChannel+0x294>)
 8001436:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800143a:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b10      	cmp	r3, #16
 8001442:	d111      	bne.n	8001468 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001444:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <HAL_ADC_ConfigChannel+0x298>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a0e      	ldr	r2, [pc, #56]	; (8001484 <HAL_ADC_ConfigChannel+0x29c>)
 800144a:	fba2 2303 	umull	r2, r3, r2, r3
 800144e:	0c9a      	lsrs	r2, r3, #18
 8001450:	4613      	mov	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800145a:	e002      	b.n	8001462 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	3b01      	subs	r3, #1
 8001460:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1f9      	bne.n	800145c <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001470:	7bfb      	ldrb	r3, [r7, #15]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	40012700 	.word	0x40012700
 8001480:	20000000 	.word	0x20000000
 8001484:	431bde83 	.word	0x431bde83

08001488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a4:	4013      	ands	r3, r2
 80014a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ba:	4a04      	ldr	r2, [pc, #16]	; (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	60d3      	str	r3, [r2, #12]
}
 80014c0:	bf00      	nop
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <__NVIC_GetPriorityGrouping+0x18>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	f003 0307 	and.w	r3, r3, #7
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	6039      	str	r1, [r7, #0]
 80014f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	db0a      	blt.n	8001516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	b2da      	uxtb	r2, r3
 8001504:	490c      	ldr	r1, [pc, #48]	; (8001538 <__NVIC_SetPriority+0x4c>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	0112      	lsls	r2, r2, #4
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	440b      	add	r3, r1
 8001510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001514:	e00a      	b.n	800152c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4908      	ldr	r1, [pc, #32]	; (800153c <__NVIC_SetPriority+0x50>)
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	3b04      	subs	r3, #4
 8001524:	0112      	lsls	r2, r2, #4
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	440b      	add	r3, r1
 800152a:	761a      	strb	r2, [r3, #24]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000e100 	.word	0xe000e100
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001540:	b480      	push	{r7}
 8001542:	b089      	sub	sp, #36	; 0x24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f1c3 0307 	rsb	r3, r3, #7
 800155a:	2b04      	cmp	r3, #4
 800155c:	bf28      	it	cs
 800155e:	2304      	movcs	r3, #4
 8001560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3304      	adds	r3, #4
 8001566:	2b06      	cmp	r3, #6
 8001568:	d902      	bls.n	8001570 <NVIC_EncodePriority+0x30>
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3b03      	subs	r3, #3
 800156e:	e000      	b.n	8001572 <NVIC_EncodePriority+0x32>
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	f04f 32ff 	mov.w	r2, #4294967295
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43da      	mvns	r2, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	401a      	ands	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001588:	f04f 31ff 	mov.w	r1, #4294967295
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	43d9      	mvns	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	4313      	orrs	r3, r2
         );
}
 800159a:	4618      	mov	r0, r3
 800159c:	3724      	adds	r7, #36	; 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b4:	d301      	bcc.n	80015ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00f      	b.n	80015da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ba:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <SysTick_Config+0x40>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3b01      	subs	r3, #1
 80015c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015c2:	210f      	movs	r1, #15
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295
 80015c8:	f7ff ff90 	bl	80014ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <SysTick_Config+0x40>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d2:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <SysTick_Config+0x40>)
 80015d4:	2207      	movs	r2, #7
 80015d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	e000e010 	.word	0xe000e010

080015e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ff49 	bl	8001488 <__NVIC_SetPriorityGrouping>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b086      	sub	sp, #24
 8001602:	af00      	add	r7, sp, #0
 8001604:	4603      	mov	r3, r0
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
 800160a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001610:	f7ff ff5e 	bl	80014d0 <__NVIC_GetPriorityGrouping>
 8001614:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	6978      	ldr	r0, [r7, #20]
 800161c:	f7ff ff90 	bl	8001540 <NVIC_EncodePriority>
 8001620:	4602      	mov	r2, r0
 8001622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff5f 	bl	80014ec <__NVIC_SetPriority>
}
 800162e:	bf00      	nop
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff ffb0 	bl	80015a4 <SysTick_Config>
 8001644:	4603      	mov	r3, r0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e014      	b.n	800168a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	791b      	ldrb	r3, [r3, #4]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d105      	bne.n	8001676 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff fa11 	bl	8000a98 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2202      	movs	r2, #2
 800167a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001692:	b480      	push	{r7}
 8001694:	b087      	sub	sp, #28
 8001696:	af00      	add	r7, sp, #0
 8001698:	60f8      	str	r0, [r7, #12]
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	795b      	ldrb	r3, [r3, #5]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d101      	bne.n	80016aa <HAL_DAC_ConfigChannel+0x18>
 80016a6:	2302      	movs	r3, #2
 80016a8:	e03c      	b.n	8001724 <HAL_DAC_ConfigChannel+0x92>
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2201      	movs	r2, #1
 80016ae:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2202      	movs	r2, #2
 80016b4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f003 0310 	and.w	r3, r3, #16
 80016c4:	f640 72fe 	movw	r2, #4094	; 0xffe
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	4013      	ands	r3, r2
 80016d2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	4313      	orrs	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f003 0310 	and.w	r3, r3, #16
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6819      	ldr	r1, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f003 0310 	and.w	r3, r3, #16
 8001706:	22c0      	movs	r2, #192	; 0xc0
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43da      	mvns	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	400a      	ands	r2, r1
 8001714:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2201      	movs	r2, #1
 800171a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2200      	movs	r2, #0
 8001720:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	371c      	adds	r7, #28
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr
	...

08001730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001730:	b480      	push	{r7}
 8001732:	b087      	sub	sp, #28
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001746:	e154      	b.n	80019f2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	2101      	movs	r1, #1
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	fa01 f303 	lsl.w	r3, r1, r3
 8001754:	4013      	ands	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 8146 	beq.w	80019ec <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	2b01      	cmp	r3, #1
 800176a:	d005      	beq.n	8001778 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001774:	2b02      	cmp	r3, #2
 8001776:	d130      	bne.n	80017da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	2203      	movs	r2, #3
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4313      	orrs	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80017ae:	2201      	movs	r2, #1
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	091b      	lsrs	r3, r3, #4
 80017c4:	f003 0201 	and.w	r2, r3, #1
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d017      	beq.n	8001816 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	2203      	movs	r2, #3
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43db      	mvns	r3, r3
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4013      	ands	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	4313      	orrs	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d123      	bne.n	800186a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	08da      	lsrs	r2, r3, #3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3208      	adds	r2, #8
 800182a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800182e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	220f      	movs	r2, #15
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	691a      	ldr	r2, [r3, #16]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	08da      	lsrs	r2, r3, #3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3208      	adds	r2, #8
 8001864:	6939      	ldr	r1, [r7, #16]
 8001866:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	2203      	movs	r2, #3
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4013      	ands	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 0203 	and.w	r2, r3, #3
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 80a0 	beq.w	80019ec <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ac:	4b58      	ldr	r3, [pc, #352]	; (8001a10 <HAL_GPIO_Init+0x2e0>)
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	4a57      	ldr	r2, [pc, #348]	; (8001a10 <HAL_GPIO_Init+0x2e0>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6213      	str	r3, [r2, #32]
 80018b8:	4b55      	ldr	r3, [pc, #340]	; (8001a10 <HAL_GPIO_Init+0x2e0>)
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80018c4:	4a53      	ldr	r2, [pc, #332]	; (8001a14 <HAL_GPIO_Init+0x2e4>)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	089b      	lsrs	r3, r3, #2
 80018ca:	3302      	adds	r3, #2
 80018cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	220f      	movs	r2, #15
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a4b      	ldr	r2, [pc, #300]	; (8001a18 <HAL_GPIO_Init+0x2e8>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d019      	beq.n	8001924 <HAL_GPIO_Init+0x1f4>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a4a      	ldr	r2, [pc, #296]	; (8001a1c <HAL_GPIO_Init+0x2ec>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d013      	beq.n	8001920 <HAL_GPIO_Init+0x1f0>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a49      	ldr	r2, [pc, #292]	; (8001a20 <HAL_GPIO_Init+0x2f0>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d00d      	beq.n	800191c <HAL_GPIO_Init+0x1ec>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a48      	ldr	r2, [pc, #288]	; (8001a24 <HAL_GPIO_Init+0x2f4>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d007      	beq.n	8001918 <HAL_GPIO_Init+0x1e8>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a47      	ldr	r2, [pc, #284]	; (8001a28 <HAL_GPIO_Init+0x2f8>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d101      	bne.n	8001914 <HAL_GPIO_Init+0x1e4>
 8001910:	2304      	movs	r3, #4
 8001912:	e008      	b.n	8001926 <HAL_GPIO_Init+0x1f6>
 8001914:	2305      	movs	r3, #5
 8001916:	e006      	b.n	8001926 <HAL_GPIO_Init+0x1f6>
 8001918:	2303      	movs	r3, #3
 800191a:	e004      	b.n	8001926 <HAL_GPIO_Init+0x1f6>
 800191c:	2302      	movs	r3, #2
 800191e:	e002      	b.n	8001926 <HAL_GPIO_Init+0x1f6>
 8001920:	2301      	movs	r3, #1
 8001922:	e000      	b.n	8001926 <HAL_GPIO_Init+0x1f6>
 8001924:	2300      	movs	r3, #0
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	f002 0203 	and.w	r2, r2, #3
 800192c:	0092      	lsls	r2, r2, #2
 800192e:	4093      	lsls	r3, r2
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4313      	orrs	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001936:	4937      	ldr	r1, [pc, #220]	; (8001a14 <HAL_GPIO_Init+0x2e4>)
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	089b      	lsrs	r3, r3, #2
 800193c:	3302      	adds	r3, #2
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001944:	4b39      	ldr	r3, [pc, #228]	; (8001a2c <HAL_GPIO_Init+0x2fc>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	43db      	mvns	r3, r3
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4313      	orrs	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001968:	4a30      	ldr	r2, [pc, #192]	; (8001a2c <HAL_GPIO_Init+0x2fc>)
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800196e:	4b2f      	ldr	r3, [pc, #188]	; (8001a2c <HAL_GPIO_Init+0x2fc>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	43db      	mvns	r3, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4013      	ands	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4313      	orrs	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001992:	4a26      	ldr	r2, [pc, #152]	; (8001a2c <HAL_GPIO_Init+0x2fc>)
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001998:	4b24      	ldr	r3, [pc, #144]	; (8001a2c <HAL_GPIO_Init+0x2fc>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019bc:	4a1b      	ldr	r2, [pc, #108]	; (8001a2c <HAL_GPIO_Init+0x2fc>)
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019c2:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <HAL_GPIO_Init+0x2fc>)
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	43db      	mvns	r3, r3
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	4013      	ands	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019e6:	4a11      	ldr	r2, [pc, #68]	; (8001a2c <HAL_GPIO_Init+0x2fc>)
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	3301      	adds	r3, #1
 80019f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	fa22 f303 	lsr.w	r3, r2, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f47f aea3 	bne.w	8001748 <HAL_GPIO_Init+0x18>
  }
}
 8001a02:	bf00      	nop
 8001a04:	bf00      	nop
 8001a06:	371c      	adds	r7, #28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40010000 	.word	0x40010000
 8001a18:	40020000 	.word	0x40020000
 8001a1c:	40020400 	.word	0x40020400
 8001a20:	40020800 	.word	0x40020800
 8001a24:	40020c00 	.word	0x40020c00
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40010400 	.word	0x40010400

08001a30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e12b      	b.n	8001c9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d106      	bne.n	8001a5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff f85e 	bl	8000b18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2224      	movs	r2, #36	; 0x24
 8001a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0201 	bic.w	r2, r2, #1
 8001a72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a94:	f000 ff90 	bl	80029b8 <HAL_RCC_GetPCLK1Freq>
 8001a98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	4a81      	ldr	r2, [pc, #516]	; (8001ca4 <HAL_I2C_Init+0x274>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d807      	bhi.n	8001ab4 <HAL_I2C_Init+0x84>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4a80      	ldr	r2, [pc, #512]	; (8001ca8 <HAL_I2C_Init+0x278>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	bf94      	ite	ls
 8001aac:	2301      	movls	r3, #1
 8001aae:	2300      	movhi	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	e006      	b.n	8001ac2 <HAL_I2C_Init+0x92>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4a7d      	ldr	r2, [pc, #500]	; (8001cac <HAL_I2C_Init+0x27c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	bf94      	ite	ls
 8001abc:	2301      	movls	r3, #1
 8001abe:	2300      	movhi	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e0e7      	b.n	8001c9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4a78      	ldr	r2, [pc, #480]	; (8001cb0 <HAL_I2C_Init+0x280>)
 8001ace:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad2:	0c9b      	lsrs	r3, r3, #18
 8001ad4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68ba      	ldr	r2, [r7, #8]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	4a6a      	ldr	r2, [pc, #424]	; (8001ca4 <HAL_I2C_Init+0x274>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d802      	bhi.n	8001b04 <HAL_I2C_Init+0xd4>
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	3301      	adds	r3, #1
 8001b02:	e009      	b.n	8001b18 <HAL_I2C_Init+0xe8>
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b0a:	fb02 f303 	mul.w	r3, r2, r3
 8001b0e:	4a69      	ldr	r2, [pc, #420]	; (8001cb4 <HAL_I2C_Init+0x284>)
 8001b10:	fba2 2303 	umull	r2, r3, r2, r3
 8001b14:	099b      	lsrs	r3, r3, #6
 8001b16:	3301      	adds	r3, #1
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6812      	ldr	r2, [r2, #0]
 8001b1c:	430b      	orrs	r3, r1
 8001b1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	495c      	ldr	r1, [pc, #368]	; (8001ca4 <HAL_I2C_Init+0x274>)
 8001b34:	428b      	cmp	r3, r1
 8001b36:	d819      	bhi.n	8001b6c <HAL_I2C_Init+0x13c>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	1e59      	subs	r1, r3, #1
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b46:	1c59      	adds	r1, r3, #1
 8001b48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b4c:	400b      	ands	r3, r1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00a      	beq.n	8001b68 <HAL_I2C_Init+0x138>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1e59      	subs	r1, r3, #1
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b60:	3301      	adds	r3, #1
 8001b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b66:	e051      	b.n	8001c0c <HAL_I2C_Init+0x1dc>
 8001b68:	2304      	movs	r3, #4
 8001b6a:	e04f      	b.n	8001c0c <HAL_I2C_Init+0x1dc>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d111      	bne.n	8001b98 <HAL_I2C_Init+0x168>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	1e58      	subs	r0, r3, #1
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6859      	ldr	r1, [r3, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	440b      	add	r3, r1
 8001b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b86:	3301      	adds	r3, #1
 8001b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	bf0c      	ite	eq
 8001b90:	2301      	moveq	r3, #1
 8001b92:	2300      	movne	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	e012      	b.n	8001bbe <HAL_I2C_Init+0x18e>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	1e58      	subs	r0, r3, #1
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6859      	ldr	r1, [r3, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	0099      	lsls	r1, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bae:	3301      	adds	r3, #1
 8001bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	bf0c      	ite	eq
 8001bb8:	2301      	moveq	r3, #1
 8001bba:	2300      	movne	r3, #0
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_I2C_Init+0x196>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e022      	b.n	8001c0c <HAL_I2C_Init+0x1dc>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10e      	bne.n	8001bec <HAL_I2C_Init+0x1bc>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	1e58      	subs	r0, r3, #1
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6859      	ldr	r1, [r3, #4]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	440b      	add	r3, r1
 8001bdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001be0:	3301      	adds	r3, #1
 8001be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bea:	e00f      	b.n	8001c0c <HAL_I2C_Init+0x1dc>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	1e58      	subs	r0, r3, #1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6859      	ldr	r1, [r3, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	0099      	lsls	r1, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c02:	3301      	adds	r3, #1
 8001c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	6809      	ldr	r1, [r1, #0]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69da      	ldr	r2, [r3, #28]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6911      	ldr	r1, [r2, #16]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	68d2      	ldr	r2, [r2, #12]
 8001c46:	4311      	orrs	r1, r2
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	430b      	orrs	r3, r1
 8001c4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	695a      	ldr	r2, [r3, #20]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0201 	orr.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2220      	movs	r2, #32
 8001c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	000186a0 	.word	0x000186a0
 8001ca8:	001e847f 	.word	0x001e847f
 8001cac:	003d08ff 	.word	0x003d08ff
 8001cb0:	431bde83 	.word	0x431bde83
 8001cb4:	10624dd3 	.word	0x10624dd3

08001cb8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cba:	b08b      	sub	sp, #44	; 0x2c
 8001cbc:	af06      	add	r7, sp, #24
 8001cbe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e0d0      	b.n	8001e6c <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d106      	bne.n	8001ce4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff f85c 	bl	8000d9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f001 fa3f 	bl	8003174 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	73fb      	strb	r3, [r7, #15]
 8001cfa:	e04c      	b.n	8001d96 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	440b      	add	r3, r1
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	440b      	add	r3, r1
 8001d22:	7bfa      	ldrb	r2, [r7, #15]
 8001d24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d26:	7bfa      	ldrb	r2, [r7, #15]
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	b298      	uxth	r0, r3
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	440b      	add	r3, r1
 8001d38:	3336      	adds	r3, #54	; 0x36
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	1c5a      	adds	r2, r3, #1
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	440b      	add	r3, r1
 8001d4e:	3303      	adds	r3, #3
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d54:	7bfa      	ldrb	r2, [r7, #15]
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	440b      	add	r3, r1
 8001d62:	3338      	adds	r3, #56	; 0x38
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d68:	7bfa      	ldrb	r2, [r7, #15]
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	440b      	add	r3, r1
 8001d76:	333c      	adds	r3, #60	; 0x3c
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d7c:	7bfa      	ldrb	r2, [r7, #15]
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	440b      	add	r3, r1
 8001d8a:	3340      	adds	r3, #64	; 0x40
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
 8001d92:	3301      	adds	r3, #1
 8001d94:	73fb      	strb	r3, [r7, #15]
 8001d96:	7bfa      	ldrb	r2, [r7, #15]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d3ad      	bcc.n	8001cfc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da0:	2300      	movs	r3, #0
 8001da2:	73fb      	strb	r3, [r7, #15]
 8001da4:	e044      	b.n	8001e30 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001da6:	7bfa      	ldrb	r2, [r7, #15]
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	440b      	add	r3, r1
 8001db4:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	440b      	add	r3, r1
 8001dca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dce:	7bfa      	ldrb	r2, [r7, #15]
 8001dd0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	440b      	add	r3, r1
 8001de0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001de8:	7bfa      	ldrb	r2, [r7, #15]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	440b      	add	r3, r1
 8001df6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dfe:	7bfa      	ldrb	r2, [r7, #15]
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e14:	7bfa      	ldrb	r2, [r7, #15]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	440b      	add	r3, r1
 8001e22:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	73fb      	strb	r3, [r7, #15]
 8001e30:	7bfa      	ldrb	r2, [r7, #15]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d3b5      	bcc.n	8001da6 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	687e      	ldr	r6, [r7, #4]
 8001e42:	466d      	mov	r5, sp
 8001e44:	f106 0410 	add.w	r4, r6, #16
 8001e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e4c:	6823      	ldr	r3, [r4, #0]
 8001e4e:	602b      	str	r3, [r5, #0]
 8001e50:	1d33      	adds	r3, r6, #4
 8001e52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e54:	6838      	ldr	r0, [r7, #0]
 8001e56:	f001 f9a7 	bl	80031a8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e31d      	b.n	80024c2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e86:	4b94      	ldr	r3, [pc, #592]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e90:	4b91      	ldr	r3, [pc, #580]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e98:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d07b      	beq.n	8001f9e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d006      	beq.n	8001eba <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	2b0c      	cmp	r3, #12
 8001eb0:	d10f      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x5e>
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb8:	d10b      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eba:	4b87      	ldr	r3, [pc, #540]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d06a      	beq.n	8001f9c <HAL_RCC_OscConfig+0x128>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d166      	bne.n	8001f9c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e2f7      	b.n	80024c2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d106      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x74>
 8001eda:	4b7f      	ldr	r3, [pc, #508]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a7e      	ldr	r2, [pc, #504]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 8001ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e02d      	b.n	8001f44 <HAL_RCC_OscConfig+0xd0>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10c      	bne.n	8001f0a <HAL_RCC_OscConfig+0x96>
 8001ef0:	4b79      	ldr	r3, [pc, #484]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a78      	ldr	r2, [pc, #480]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 8001ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001efa:	6013      	str	r3, [r2, #0]
 8001efc:	4b76      	ldr	r3, [pc, #472]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a75      	ldr	r2, [pc, #468]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 8001f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f06:	6013      	str	r3, [r2, #0]
 8001f08:	e01c      	b.n	8001f44 <HAL_RCC_OscConfig+0xd0>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b05      	cmp	r3, #5
 8001f10:	d10c      	bne.n	8001f2c <HAL_RCC_OscConfig+0xb8>
 8001f12:	4b71      	ldr	r3, [pc, #452]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a70      	ldr	r2, [pc, #448]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 8001f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	4b6e      	ldr	r3, [pc, #440]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a6d      	ldr	r2, [pc, #436]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 8001f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e00b      	b.n	8001f44 <HAL_RCC_OscConfig+0xd0>
 8001f2c:	4b6a      	ldr	r3, [pc, #424]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a69      	ldr	r2, [pc, #420]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 8001f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f36:	6013      	str	r3, [r2, #0]
 8001f38:	4b67      	ldr	r3, [pc, #412]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a66      	ldr	r2, [pc, #408]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 8001f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d013      	beq.n	8001f74 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4c:	f7fe fffc 	bl	8000f48 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f54:	f7fe fff8 	bl	8000f48 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b64      	cmp	r3, #100	; 0x64
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e2ad      	b.n	80024c2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f66:	4b5c      	ldr	r3, [pc, #368]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0xe0>
 8001f72:	e014      	b.n	8001f9e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f74:	f7fe ffe8 	bl	8000f48 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f7c:	f7fe ffe4 	bl	8000f48 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b64      	cmp	r3, #100	; 0x64
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e299      	b.n	80024c2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f8e:	4b52      	ldr	r3, [pc, #328]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f0      	bne.n	8001f7c <HAL_RCC_OscConfig+0x108>
 8001f9a:	e000      	b.n	8001f9e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d05a      	beq.n	8002060 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d005      	beq.n	8001fbc <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	2b0c      	cmp	r3, #12
 8001fb4:	d119      	bne.n	8001fea <HAL_RCC_OscConfig+0x176>
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d116      	bne.n	8001fea <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fbc:	4b46      	ldr	r3, [pc, #280]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x160>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e276      	b.n	80024c2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd4:	4b40      	ldr	r3, [pc, #256]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	021b      	lsls	r3, r3, #8
 8001fe2:	493d      	ldr	r1, [pc, #244]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe8:	e03a      	b.n	8002060 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d020      	beq.n	8002034 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff2:	4b3a      	ldr	r3, [pc, #232]	; (80020dc <HAL_RCC_OscConfig+0x268>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff8:	f7fe ffa6 	bl	8000f48 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002000:	f7fe ffa2 	bl	8000f48 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e257      	b.n	80024c2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002012:	4b31      	ldr	r3, [pc, #196]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0f0      	beq.n	8002000 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201e:	4b2e      	ldr	r3, [pc, #184]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	021b      	lsls	r3, r3, #8
 800202c:	492a      	ldr	r1, [pc, #168]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 800202e:	4313      	orrs	r3, r2
 8002030:	604b      	str	r3, [r1, #4]
 8002032:	e015      	b.n	8002060 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002034:	4b29      	ldr	r3, [pc, #164]	; (80020dc <HAL_RCC_OscConfig+0x268>)
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203a:	f7fe ff85 	bl	8000f48 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002042:	f7fe ff81 	bl	8000f48 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e236      	b.n	80024c2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002054:	4b20      	ldr	r3, [pc, #128]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1f0      	bne.n	8002042 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0310 	and.w	r3, r3, #16
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 80b8 	beq.w	80021de <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d170      	bne.n	8002156 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002074:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_RCC_OscConfig+0x218>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e21a      	b.n	80024c2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a1a      	ldr	r2, [r3, #32]
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002098:	429a      	cmp	r2, r3
 800209a:	d921      	bls.n	80020e0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 fcb1 	bl	8002a08 <RCC_SetFlashLatencyFromMSIRange>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e208      	b.n	80024c2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020b0:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	4906      	ldr	r1, [pc, #24]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020c2:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	061b      	lsls	r3, r3, #24
 80020d0:	4901      	ldr	r1, [pc, #4]	; (80020d8 <HAL_RCC_OscConfig+0x264>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	604b      	str	r3, [r1, #4]
 80020d6:	e020      	b.n	800211a <HAL_RCC_OscConfig+0x2a6>
 80020d8:	40023800 	.word	0x40023800
 80020dc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020e0:	4b99      	ldr	r3, [pc, #612]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	4996      	ldr	r1, [pc, #600]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020f2:	4b95      	ldr	r3, [pc, #596]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	061b      	lsls	r3, r3, #24
 8002100:	4991      	ldr	r1, [pc, #580]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 8002102:	4313      	orrs	r3, r2
 8002104:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	4618      	mov	r0, r3
 800210c:	f000 fc7c 	bl	8002a08 <RCC_SetFlashLatencyFromMSIRange>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e1d3      	b.n	80024c2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	0b5b      	lsrs	r3, r3, #13
 8002120:	3301      	adds	r3, #1
 8002122:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800212a:	4a87      	ldr	r2, [pc, #540]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 800212c:	6892      	ldr	r2, [r2, #8]
 800212e:	0912      	lsrs	r2, r2, #4
 8002130:	f002 020f 	and.w	r2, r2, #15
 8002134:	4985      	ldr	r1, [pc, #532]	; (800234c <HAL_RCC_OscConfig+0x4d8>)
 8002136:	5c8a      	ldrb	r2, [r1, r2]
 8002138:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800213a:	4a85      	ldr	r2, [pc, #532]	; (8002350 <HAL_RCC_OscConfig+0x4dc>)
 800213c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800213e:	4b85      	ldr	r3, [pc, #532]	; (8002354 <HAL_RCC_OscConfig+0x4e0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe feb4 	bl	8000eb0 <HAL_InitTick>
 8002148:	4603      	mov	r3, r0
 800214a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d045      	beq.n	80021de <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	e1b5      	b.n	80024c2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d029      	beq.n	80021b2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800215e:	4b7e      	ldr	r3, [pc, #504]	; (8002358 <HAL_RCC_OscConfig+0x4e4>)
 8002160:	2201      	movs	r2, #1
 8002162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7fe fef0 	bl	8000f48 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800216c:	f7fe feec 	bl	8000f48 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e1a1      	b.n	80024c2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800217e:	4b72      	ldr	r3, [pc, #456]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800218a:	4b6f      	ldr	r3, [pc, #444]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	496c      	ldr	r1, [pc, #432]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 8002198:	4313      	orrs	r3, r2
 800219a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800219c:	4b6a      	ldr	r3, [pc, #424]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	061b      	lsls	r3, r3, #24
 80021aa:	4967      	ldr	r1, [pc, #412]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	604b      	str	r3, [r1, #4]
 80021b0:	e015      	b.n	80021de <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021b2:	4b69      	ldr	r3, [pc, #420]	; (8002358 <HAL_RCC_OscConfig+0x4e4>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b8:	f7fe fec6 	bl	8000f48 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021c0:	f7fe fec2 	bl	8000f48 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e177      	b.n	80024c2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80021d2:	4b5d      	ldr	r3, [pc, #372]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d030      	beq.n	800224c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d016      	beq.n	8002220 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021f2:	4b5a      	ldr	r3, [pc, #360]	; (800235c <HAL_RCC_OscConfig+0x4e8>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f8:	f7fe fea6 	bl	8000f48 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002200:	f7fe fea2 	bl	8000f48 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e157      	b.n	80024c2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002212:	4b4d      	ldr	r3, [pc, #308]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 8002214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0x38c>
 800221e:	e015      	b.n	800224c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002220:	4b4e      	ldr	r3, [pc, #312]	; (800235c <HAL_RCC_OscConfig+0x4e8>)
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002226:	f7fe fe8f 	bl	8000f48 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800222e:	f7fe fe8b 	bl	8000f48 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e140      	b.n	80024c2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002240:	4b41      	ldr	r3, [pc, #260]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 8002242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1f0      	bne.n	800222e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80b5 	beq.w	80023c4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800225a:	2300      	movs	r3, #0
 800225c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800225e:	4b3a      	ldr	r3, [pc, #232]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10d      	bne.n	8002286 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800226a:	4b37      	ldr	r3, [pc, #220]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	4a36      	ldr	r2, [pc, #216]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 8002270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002274:	6253      	str	r3, [r2, #36]	; 0x24
 8002276:	4b34      	ldr	r3, [pc, #208]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002282:	2301      	movs	r3, #1
 8002284:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002286:	4b36      	ldr	r3, [pc, #216]	; (8002360 <HAL_RCC_OscConfig+0x4ec>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228e:	2b00      	cmp	r3, #0
 8002290:	d118      	bne.n	80022c4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002292:	4b33      	ldr	r3, [pc, #204]	; (8002360 <HAL_RCC_OscConfig+0x4ec>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a32      	ldr	r2, [pc, #200]	; (8002360 <HAL_RCC_OscConfig+0x4ec>)
 8002298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800229e:	f7fe fe53 	bl	8000f48 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a6:	f7fe fe4f 	bl	8000f48 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b64      	cmp	r3, #100	; 0x64
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e104      	b.n	80024c2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b8:	4b29      	ldr	r3, [pc, #164]	; (8002360 <HAL_RCC_OscConfig+0x4ec>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d106      	bne.n	80022da <HAL_RCC_OscConfig+0x466>
 80022cc:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 80022ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d0:	4a1d      	ldr	r2, [pc, #116]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 80022d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d6:	6353      	str	r3, [r2, #52]	; 0x34
 80022d8:	e02d      	b.n	8002336 <HAL_RCC_OscConfig+0x4c2>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0x488>
 80022e2:	4b19      	ldr	r3, [pc, #100]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 80022e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e6:	4a18      	ldr	r2, [pc, #96]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 80022e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022ec:	6353      	str	r3, [r2, #52]	; 0x34
 80022ee:	4b16      	ldr	r3, [pc, #88]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 80022f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f2:	4a15      	ldr	r2, [pc, #84]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 80022f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022f8:	6353      	str	r3, [r2, #52]	; 0x34
 80022fa:	e01c      	b.n	8002336 <HAL_RCC_OscConfig+0x4c2>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	2b05      	cmp	r3, #5
 8002302:	d10c      	bne.n	800231e <HAL_RCC_OscConfig+0x4aa>
 8002304:	4b10      	ldr	r3, [pc, #64]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 8002306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002308:	4a0f      	ldr	r2, [pc, #60]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 800230a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800230e:	6353      	str	r3, [r2, #52]	; 0x34
 8002310:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 8002312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002314:	4a0c      	ldr	r2, [pc, #48]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 8002316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800231a:	6353      	str	r3, [r2, #52]	; 0x34
 800231c:	e00b      	b.n	8002336 <HAL_RCC_OscConfig+0x4c2>
 800231e:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 8002320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002322:	4a09      	ldr	r2, [pc, #36]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 8002324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002328:	6353      	str	r3, [r2, #52]	; 0x34
 800232a:	4b07      	ldr	r3, [pc, #28]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 800232c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232e:	4a06      	ldr	r2, [pc, #24]	; (8002348 <HAL_RCC_OscConfig+0x4d4>)
 8002330:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002334:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d024      	beq.n	8002388 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233e:	f7fe fe03 	bl	8000f48 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002344:	e019      	b.n	800237a <HAL_RCC_OscConfig+0x506>
 8002346:	bf00      	nop
 8002348:	40023800 	.word	0x40023800
 800234c:	08003264 	.word	0x08003264
 8002350:	20000000 	.word	0x20000000
 8002354:	20000004 	.word	0x20000004
 8002358:	42470020 	.word	0x42470020
 800235c:	42470680 	.word	0x42470680
 8002360:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002364:	f7fe fdf0 	bl	8000f48 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002372:	4293      	cmp	r3, r2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e0a3      	b.n	80024c2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800237a:	4b54      	ldr	r3, [pc, #336]	; (80024cc <HAL_RCC_OscConfig+0x658>)
 800237c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800237e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0ee      	beq.n	8002364 <HAL_RCC_OscConfig+0x4f0>
 8002386:	e014      	b.n	80023b2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002388:	f7fe fdde 	bl	8000f48 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800238e:	e00a      	b.n	80023a6 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002390:	f7fe fdda 	bl	8000f48 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	f241 3288 	movw	r2, #5000	; 0x1388
 800239e:	4293      	cmp	r3, r2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e08d      	b.n	80024c2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023a6:	4b49      	ldr	r3, [pc, #292]	; (80024cc <HAL_RCC_OscConfig+0x658>)
 80023a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1ee      	bne.n	8002390 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023b2:	7ffb      	ldrb	r3, [r7, #31]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d105      	bne.n	80023c4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023b8:	4b44      	ldr	r3, [pc, #272]	; (80024cc <HAL_RCC_OscConfig+0x658>)
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	4a43      	ldr	r2, [pc, #268]	; (80024cc <HAL_RCC_OscConfig+0x658>)
 80023be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023c2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d079      	beq.n	80024c0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	2b0c      	cmp	r3, #12
 80023d0:	d056      	beq.n	8002480 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d13b      	bne.n	8002452 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023da:	4b3d      	ldr	r3, [pc, #244]	; (80024d0 <HAL_RCC_OscConfig+0x65c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7fe fdb2 	bl	8000f48 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e8:	f7fe fdae 	bl	8000f48 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e063      	b.n	80024c2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023fa:	4b34      	ldr	r3, [pc, #208]	; (80024cc <HAL_RCC_OscConfig+0x658>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002406:	4b31      	ldr	r3, [pc, #196]	; (80024cc <HAL_RCC_OscConfig+0x658>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002416:	4319      	orrs	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241c:	430b      	orrs	r3, r1
 800241e:	492b      	ldr	r1, [pc, #172]	; (80024cc <HAL_RCC_OscConfig+0x658>)
 8002420:	4313      	orrs	r3, r2
 8002422:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002424:	4b2a      	ldr	r3, [pc, #168]	; (80024d0 <HAL_RCC_OscConfig+0x65c>)
 8002426:	2201      	movs	r2, #1
 8002428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242a:	f7fe fd8d 	bl	8000f48 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002432:	f7fe fd89 	bl	8000f48 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e03e      	b.n	80024c2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002444:	4b21      	ldr	r3, [pc, #132]	; (80024cc <HAL_RCC_OscConfig+0x658>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0f0      	beq.n	8002432 <HAL_RCC_OscConfig+0x5be>
 8002450:	e036      	b.n	80024c0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002452:	4b1f      	ldr	r3, [pc, #124]	; (80024d0 <HAL_RCC_OscConfig+0x65c>)
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7fe fd76 	bl	8000f48 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002460:	f7fe fd72 	bl	8000f48 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e027      	b.n	80024c2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002472:	4b16      	ldr	r3, [pc, #88]	; (80024cc <HAL_RCC_OscConfig+0x658>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0x5ec>
 800247e:	e01f      	b.n	80024c0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	2b01      	cmp	r3, #1
 8002486:	d101      	bne.n	800248c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e01a      	b.n	80024c2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800248c:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <HAL_RCC_OscConfig+0x658>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249c:	429a      	cmp	r2, r3
 800249e:	d10d      	bne.n	80024bc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d106      	bne.n	80024bc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3720      	adds	r7, #32
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40023800 	.word	0x40023800
 80024d0:	42470060 	.word	0x42470060

080024d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e11a      	b.n	800271e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024e8:	4b8f      	ldr	r3, [pc, #572]	; (8002728 <HAL_RCC_ClockConfig+0x254>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d919      	bls.n	800252a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d105      	bne.n	8002508 <HAL_RCC_ClockConfig+0x34>
 80024fc:	4b8a      	ldr	r3, [pc, #552]	; (8002728 <HAL_RCC_ClockConfig+0x254>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a89      	ldr	r2, [pc, #548]	; (8002728 <HAL_RCC_ClockConfig+0x254>)
 8002502:	f043 0304 	orr.w	r3, r3, #4
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	4b87      	ldr	r3, [pc, #540]	; (8002728 <HAL_RCC_ClockConfig+0x254>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f023 0201 	bic.w	r2, r3, #1
 8002510:	4985      	ldr	r1, [pc, #532]	; (8002728 <HAL_RCC_ClockConfig+0x254>)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	4313      	orrs	r3, r2
 8002516:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002518:	4b83      	ldr	r3, [pc, #524]	; (8002728 <HAL_RCC_ClockConfig+0x254>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d001      	beq.n	800252a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e0f9      	b.n	800271e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d008      	beq.n	8002548 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002536:	4b7d      	ldr	r3, [pc, #500]	; (800272c <HAL_RCC_ClockConfig+0x258>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	497a      	ldr	r1, [pc, #488]	; (800272c <HAL_RCC_ClockConfig+0x258>)
 8002544:	4313      	orrs	r3, r2
 8002546:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 808e 	beq.w	8002672 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d107      	bne.n	800256e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800255e:	4b73      	ldr	r3, [pc, #460]	; (800272c <HAL_RCC_ClockConfig+0x258>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d121      	bne.n	80025ae <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e0d7      	b.n	800271e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b03      	cmp	r3, #3
 8002574:	d107      	bne.n	8002586 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002576:	4b6d      	ldr	r3, [pc, #436]	; (800272c <HAL_RCC_ClockConfig+0x258>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d115      	bne.n	80025ae <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e0cb      	b.n	800271e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d107      	bne.n	800259e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800258e:	4b67      	ldr	r3, [pc, #412]	; (800272c <HAL_RCC_ClockConfig+0x258>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d109      	bne.n	80025ae <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e0bf      	b.n	800271e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800259e:	4b63      	ldr	r3, [pc, #396]	; (800272c <HAL_RCC_ClockConfig+0x258>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e0b7      	b.n	800271e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ae:	4b5f      	ldr	r3, [pc, #380]	; (800272c <HAL_RCC_ClockConfig+0x258>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f023 0203 	bic.w	r2, r3, #3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	495c      	ldr	r1, [pc, #368]	; (800272c <HAL_RCC_ClockConfig+0x258>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025c0:	f7fe fcc2 	bl	8000f48 <HAL_GetTick>
 80025c4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d112      	bne.n	80025f4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80025ce:	e00a      	b.n	80025e6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d0:	f7fe fcba 	bl	8000f48 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	f241 3288 	movw	r2, #5000	; 0x1388
 80025de:	4293      	cmp	r3, r2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e09b      	b.n	800271e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80025e6:	4b51      	ldr	r3, [pc, #324]	; (800272c <HAL_RCC_ClockConfig+0x258>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 030c 	and.w	r3, r3, #12
 80025ee:	2b08      	cmp	r3, #8
 80025f0:	d1ee      	bne.n	80025d0 <HAL_RCC_ClockConfig+0xfc>
 80025f2:	e03e      	b.n	8002672 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d112      	bne.n	8002622 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025fc:	e00a      	b.n	8002614 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025fe:	f7fe fca3 	bl	8000f48 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	f241 3288 	movw	r2, #5000	; 0x1388
 800260c:	4293      	cmp	r3, r2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e084      	b.n	800271e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002614:	4b45      	ldr	r3, [pc, #276]	; (800272c <HAL_RCC_ClockConfig+0x258>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 030c 	and.w	r3, r3, #12
 800261c:	2b0c      	cmp	r3, #12
 800261e:	d1ee      	bne.n	80025fe <HAL_RCC_ClockConfig+0x12a>
 8002620:	e027      	b.n	8002672 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d11d      	bne.n	8002666 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800262a:	e00a      	b.n	8002642 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800262c:	f7fe fc8c 	bl	8000f48 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	f241 3288 	movw	r2, #5000	; 0x1388
 800263a:	4293      	cmp	r3, r2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e06d      	b.n	800271e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002642:	4b3a      	ldr	r3, [pc, #232]	; (800272c <HAL_RCC_ClockConfig+0x258>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	2b04      	cmp	r3, #4
 800264c:	d1ee      	bne.n	800262c <HAL_RCC_ClockConfig+0x158>
 800264e:	e010      	b.n	8002672 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002650:	f7fe fc7a 	bl	8000f48 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	f241 3288 	movw	r2, #5000	; 0x1388
 800265e:	4293      	cmp	r3, r2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e05b      	b.n	800271e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002666:	4b31      	ldr	r3, [pc, #196]	; (800272c <HAL_RCC_ClockConfig+0x258>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 030c 	and.w	r3, r3, #12
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1ee      	bne.n	8002650 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002672:	4b2d      	ldr	r3, [pc, #180]	; (8002728 <HAL_RCC_ClockConfig+0x254>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d219      	bcs.n	80026b4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d105      	bne.n	8002692 <HAL_RCC_ClockConfig+0x1be>
 8002686:	4b28      	ldr	r3, [pc, #160]	; (8002728 <HAL_RCC_ClockConfig+0x254>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a27      	ldr	r2, [pc, #156]	; (8002728 <HAL_RCC_ClockConfig+0x254>)
 800268c:	f043 0304 	orr.w	r3, r3, #4
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	4b25      	ldr	r3, [pc, #148]	; (8002728 <HAL_RCC_ClockConfig+0x254>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 0201 	bic.w	r2, r3, #1
 800269a:	4923      	ldr	r1, [pc, #140]	; (8002728 <HAL_RCC_ClockConfig+0x254>)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	4313      	orrs	r3, r2
 80026a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a2:	4b21      	ldr	r3, [pc, #132]	; (8002728 <HAL_RCC_ClockConfig+0x254>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d001      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e034      	b.n	800271e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d008      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c0:	4b1a      	ldr	r3, [pc, #104]	; (800272c <HAL_RCC_ClockConfig+0x258>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	4917      	ldr	r1, [pc, #92]	; (800272c <HAL_RCC_ClockConfig+0x258>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d009      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026de:	4b13      	ldr	r3, [pc, #76]	; (800272c <HAL_RCC_ClockConfig+0x258>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	490f      	ldr	r1, [pc, #60]	; (800272c <HAL_RCC_ClockConfig+0x258>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026f2:	f000 f859 	bl	80027a8 <HAL_RCC_GetSysClockFreq>
 80026f6:	4602      	mov	r2, r0
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <HAL_RCC_ClockConfig+0x258>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	091b      	lsrs	r3, r3, #4
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	490b      	ldr	r1, [pc, #44]	; (8002730 <HAL_RCC_ClockConfig+0x25c>)
 8002704:	5ccb      	ldrb	r3, [r1, r3]
 8002706:	fa22 f303 	lsr.w	r3, r2, r3
 800270a:	4a0a      	ldr	r2, [pc, #40]	; (8002734 <HAL_RCC_ClockConfig+0x260>)
 800270c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800270e:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <HAL_RCC_ClockConfig+0x264>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe fbcc 	bl	8000eb0 <HAL_InitTick>
 8002718:	4603      	mov	r3, r0
 800271a:	72fb      	strb	r3, [r7, #11]

  return status;
 800271c:	7afb      	ldrb	r3, [r7, #11]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40023c00 	.word	0x40023c00
 800272c:	40023800 	.word	0x40023800
 8002730:	08003264 	.word	0x08003264
 8002734:	20000000 	.word	0x20000000
 8002738:	20000004 	.word	0x20000004

0800273c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16 division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08a      	sub	sp, #40	; 0x28
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002748:	2302      	movs	r3, #2
 800274a:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800274c:	2302      	movs	r3, #2
 800274e:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 8002754:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002758:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 800275a:	2300      	movs	r3, #0
 800275c:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 800275e:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <HAL_RCC_MCOConfig+0x64>)
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	4a0f      	ldr	r2, [pc, #60]	; (80027a0 <HAL_RCC_MCOConfig+0x64>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	61d3      	str	r3, [r2, #28]
 800276a:	4b0d      	ldr	r3, [pc, #52]	; (80027a0 <HAL_RCC_MCOConfig+0x64>)
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	693b      	ldr	r3, [r7, #16]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002776:	f107 0314 	add.w	r3, r7, #20
 800277a:	4619      	mov	r1, r3
 800277c:	4809      	ldr	r0, [pc, #36]	; (80027a4 <HAL_RCC_MCOConfig+0x68>)
 800277e:	f7fe ffd7 	bl	8001730 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8002782:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <HAL_RCC_MCOConfig+0x64>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 800278a:	68b9      	ldr	r1, [r7, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	430b      	orrs	r3, r1
 8002790:	4903      	ldr	r1, [pc, #12]	; (80027a0 <HAL_RCC_MCOConfig+0x64>)
 8002792:	4313      	orrs	r3, r2
 8002794:	608b      	str	r3, [r1, #8]
}
 8002796:	bf00      	nop
 8002798:	3728      	adds	r7, #40	; 0x28
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40020000 	.word	0x40020000

080027a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027ac:	b092      	sub	sp, #72	; 0x48
 80027ae:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80027b0:	4b79      	ldr	r3, [pc, #484]	; (8002998 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027b8:	f003 030c 	and.w	r3, r3, #12
 80027bc:	2b0c      	cmp	r3, #12
 80027be:	d00d      	beq.n	80027dc <HAL_RCC_GetSysClockFreq+0x34>
 80027c0:	2b0c      	cmp	r3, #12
 80027c2:	f200 80d5 	bhi.w	8002970 <HAL_RCC_GetSysClockFreq+0x1c8>
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d002      	beq.n	80027d0 <HAL_RCC_GetSysClockFreq+0x28>
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d003      	beq.n	80027d6 <HAL_RCC_GetSysClockFreq+0x2e>
 80027ce:	e0cf      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027d0:	4b72      	ldr	r3, [pc, #456]	; (800299c <HAL_RCC_GetSysClockFreq+0x1f4>)
 80027d2:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80027d4:	e0da      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027d6:	4b71      	ldr	r3, [pc, #452]	; (800299c <HAL_RCC_GetSysClockFreq+0x1f4>)
 80027d8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80027da:	e0d7      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80027dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027de:	0c9b      	lsrs	r3, r3, #18
 80027e0:	f003 020f 	and.w	r2, r3, #15
 80027e4:	4b6e      	ldr	r3, [pc, #440]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80027e6:	5c9b      	ldrb	r3, [r3, r2]
 80027e8:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80027ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ec:	0d9b      	lsrs	r3, r3, #22
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	3301      	adds	r3, #1
 80027f4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027f6:	4b68      	ldr	r3, [pc, #416]	; (8002998 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d05d      	beq.n	80028be <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002804:	2200      	movs	r2, #0
 8002806:	4618      	mov	r0, r3
 8002808:	4611      	mov	r1, r2
 800280a:	4604      	mov	r4, r0
 800280c:	460d      	mov	r5, r1
 800280e:	4622      	mov	r2, r4
 8002810:	462b      	mov	r3, r5
 8002812:	f04f 0000 	mov.w	r0, #0
 8002816:	f04f 0100 	mov.w	r1, #0
 800281a:	0159      	lsls	r1, r3, #5
 800281c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002820:	0150      	lsls	r0, r2, #5
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4621      	mov	r1, r4
 8002828:	1a51      	subs	r1, r2, r1
 800282a:	6139      	str	r1, [r7, #16]
 800282c:	4629      	mov	r1, r5
 800282e:	eb63 0301 	sbc.w	r3, r3, r1
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002840:	4659      	mov	r1, fp
 8002842:	018b      	lsls	r3, r1, #6
 8002844:	4651      	mov	r1, sl
 8002846:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800284a:	4651      	mov	r1, sl
 800284c:	018a      	lsls	r2, r1, #6
 800284e:	46d4      	mov	ip, sl
 8002850:	ebb2 080c 	subs.w	r8, r2, ip
 8002854:	4659      	mov	r1, fp
 8002856:	eb63 0901 	sbc.w	r9, r3, r1
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002866:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800286a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800286e:	4690      	mov	r8, r2
 8002870:	4699      	mov	r9, r3
 8002872:	4623      	mov	r3, r4
 8002874:	eb18 0303 	adds.w	r3, r8, r3
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	462b      	mov	r3, r5
 800287c:	eb49 0303 	adc.w	r3, r9, r3
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800288e:	4629      	mov	r1, r5
 8002890:	028b      	lsls	r3, r1, #10
 8002892:	4620      	mov	r0, r4
 8002894:	4629      	mov	r1, r5
 8002896:	4604      	mov	r4, r0
 8002898:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800289c:	4601      	mov	r1, r0
 800289e:	028a      	lsls	r2, r1, #10
 80028a0:	4610      	mov	r0, r2
 80028a2:	4619      	mov	r1, r3
 80028a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a6:	2200      	movs	r2, #0
 80028a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80028aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028b0:	f7fd fc64 	bl	800017c <__aeabi_uldivmod>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4613      	mov	r3, r2
 80028ba:	647b      	str	r3, [r7, #68]	; 0x44
 80028bc:	e055      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80028be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c0:	2200      	movs	r2, #0
 80028c2:	623b      	str	r3, [r7, #32]
 80028c4:	627a      	str	r2, [r7, #36]	; 0x24
 80028c6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028ca:	4642      	mov	r2, r8
 80028cc:	464b      	mov	r3, r9
 80028ce:	f04f 0000 	mov.w	r0, #0
 80028d2:	f04f 0100 	mov.w	r1, #0
 80028d6:	0159      	lsls	r1, r3, #5
 80028d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028dc:	0150      	lsls	r0, r2, #5
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	46c4      	mov	ip, r8
 80028e4:	ebb2 0a0c 	subs.w	sl, r2, ip
 80028e8:	4640      	mov	r0, r8
 80028ea:	4649      	mov	r1, r9
 80028ec:	468c      	mov	ip, r1
 80028ee:	eb63 0b0c 	sbc.w	fp, r3, ip
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028fe:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002902:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002906:	ebb2 040a 	subs.w	r4, r2, sl
 800290a:	eb63 050b 	sbc.w	r5, r3, fp
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	f04f 0300 	mov.w	r3, #0
 8002916:	00eb      	lsls	r3, r5, #3
 8002918:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800291c:	00e2      	lsls	r2, r4, #3
 800291e:	4614      	mov	r4, r2
 8002920:	461d      	mov	r5, r3
 8002922:	4603      	mov	r3, r0
 8002924:	18e3      	adds	r3, r4, r3
 8002926:	603b      	str	r3, [r7, #0]
 8002928:	460b      	mov	r3, r1
 800292a:	eb45 0303 	adc.w	r3, r5, r3
 800292e:	607b      	str	r3, [r7, #4]
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	e9d7 4500 	ldrd	r4, r5, [r7]
 800293c:	4629      	mov	r1, r5
 800293e:	028b      	lsls	r3, r1, #10
 8002940:	4620      	mov	r0, r4
 8002942:	4629      	mov	r1, r5
 8002944:	4604      	mov	r4, r0
 8002946:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800294a:	4601      	mov	r1, r0
 800294c:	028a      	lsls	r2, r1, #10
 800294e:	4610      	mov	r0, r2
 8002950:	4619      	mov	r1, r3
 8002952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002954:	2200      	movs	r2, #0
 8002956:	61bb      	str	r3, [r7, #24]
 8002958:	61fa      	str	r2, [r7, #28]
 800295a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800295e:	f7fd fc0d 	bl	800017c <__aeabi_uldivmod>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4613      	mov	r3, r2
 8002968:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 800296a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800296c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800296e:	e00d      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002970:	4b09      	ldr	r3, [pc, #36]	; (8002998 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	0b5b      	lsrs	r3, r3, #13
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800297c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297e:	3301      	adds	r3, #1
 8002980:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800298a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800298c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800298e:	4618      	mov	r0, r3
 8002990:	3748      	adds	r7, #72	; 0x48
 8002992:	46bd      	mov	sp, r7
 8002994:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002998:	40023800 	.word	0x40023800
 800299c:	00f42400 	.word	0x00f42400
 80029a0:	08003258 	.word	0x08003258

080029a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029a8:	4b02      	ldr	r3, [pc, #8]	; (80029b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80029aa:	681b      	ldr	r3, [r3, #0]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr
 80029b4:	20000000 	.word	0x20000000

080029b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029bc:	f7ff fff2 	bl	80029a4 <HAL_RCC_GetHCLKFreq>
 80029c0:	4602      	mov	r2, r0
 80029c2:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	0a1b      	lsrs	r3, r3, #8
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	4903      	ldr	r1, [pc, #12]	; (80029dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ce:	5ccb      	ldrb	r3, [r1, r3]
 80029d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40023800 	.word	0x40023800
 80029dc:	08003274 	.word	0x08003274

080029e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029e4:	f7ff ffde 	bl	80029a4 <HAL_RCC_GetHCLKFreq>
 80029e8:	4602      	mov	r2, r0
 80029ea:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	0adb      	lsrs	r3, r3, #11
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	4903      	ldr	r1, [pc, #12]	; (8002a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029f6:	5ccb      	ldrb	r3, [r1, r3]
 80029f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40023800 	.word	0x40023800
 8002a04:	08003274 	.word	0x08003274

08002a08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a10:	2300      	movs	r3, #0
 8002a12:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002a14:	4b29      	ldr	r3, [pc, #164]	; (8002abc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d12c      	bne.n	8002a7a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a20:	4b26      	ldr	r3, [pc, #152]	; (8002abc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002a2c:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002a34:	617b      	str	r3, [r7, #20]
 8002a36:	e016      	b.n	8002a66 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a38:	4b20      	ldr	r3, [pc, #128]	; (8002abc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	4a1f      	ldr	r2, [pc, #124]	; (8002abc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a42:	6253      	str	r3, [r2, #36]	; 0x24
 8002a44:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002a50:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002a58:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a5a:	4b18      	ldr	r3, [pc, #96]	; (8002abc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	4a17      	ldr	r2, [pc, #92]	; (8002abc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a64:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002a6c:	d105      	bne.n	8002a7a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002a74:	d101      	bne.n	8002a7a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002a76:	2301      	movs	r3, #1
 8002a78:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d105      	bne.n	8002a8c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002a80:	4b10      	ldr	r3, [pc, #64]	; (8002ac4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a0f      	ldr	r2, [pc, #60]	; (8002ac4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a86:	f043 0304 	orr.w	r3, r3, #4
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	4b0d      	ldr	r3, [pc, #52]	; (8002ac4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f023 0201 	bic.w	r2, r3, #1
 8002a94:	490b      	ldr	r1, [pc, #44]	; (8002ac4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a9c:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d001      	beq.n	8002aae <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	371c      	adds	r7, #28
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40007000 	.word	0x40007000
 8002ac4:	40023c00 	.word	0x40023c00

08002ac8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 80b8 	beq.w	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ae2:	4b5d      	ldr	r3, [pc, #372]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10d      	bne.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aee:	4b5a      	ldr	r3, [pc, #360]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	4a59      	ldr	r2, [pc, #356]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af8:	6253      	str	r3, [r2, #36]	; 0x24
 8002afa:	4b57      	ldr	r3, [pc, #348]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b06:	2301      	movs	r3, #1
 8002b08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0a:	4b54      	ldr	r3, [pc, #336]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d118      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b16:	4b51      	ldr	r3, [pc, #324]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a50      	ldr	r2, [pc, #320]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b22:	f7fe fa11 	bl	8000f48 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b28:	e008      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b2a:	f7fe fa0d 	bl	8000f48 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b64      	cmp	r3, #100	; 0x64
 8002b36:	d901      	bls.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e089      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x188>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3c:	4b47      	ldr	r3, [pc, #284]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0f0      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002b48:	4b43      	ldr	r3, [pc, #268]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002b50:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d00f      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b6c:	d108      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002b6e:	4b3a      	ldr	r3, [pc, #232]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b7a:	d101      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0xb8>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e067      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x188>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002b80:	4b35      	ldr	r3, [pc, #212]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b88:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d034      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x132>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d02d      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x132>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d027      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x132>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002baa:	4b2b      	ldr	r3, [pc, #172]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002bb2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bb4:	4b2a      	ldr	r3, [pc, #168]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bba:	4b29      	ldr	r3, [pc, #164]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002bc0:	4a25      	ldr	r2, [pc, #148]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d014      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x132>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd0:	f7fe f9ba 	bl	8000f48 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bd6:	e00a      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd8:	f7fe f9b6 	bl	8000f48 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e030      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x188>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bee:	4b1a      	ldr	r3, [pc, #104]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0ee      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d01a      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c12:	d10a      	bne.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x162>
 8002c14:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002c24:	490c      	ldr	r1, [pc, #48]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	600b      	str	r3, [r1, #0]
 8002c2a:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002c2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c36:	4908      	ldr	r1, [pc, #32]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c3c:	7dfb      	ldrb	r3, [r7, #23]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d105      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c42:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	4a04      	ldr	r2, [pc, #16]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40007000 	.word	0x40007000
 8002c60:	424706dc 	.word	0x424706dc

08002c64 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e07c      	b.n	8002d70 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	7f5b      	ldrb	r3, [r3, #29]
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d105      	bne.n	8002c8c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7fd ffba 	bl	8000c00 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	22ca      	movs	r2, #202	; 0xca
 8002c98:	625a      	str	r2, [r3, #36]	; 0x24
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2253      	movs	r2, #83	; 0x53
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f88e 	bl	8002dc4 <RTC_EnterInitMode>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d008      	beq.n	8002cc0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	22ff      	movs	r2, #255	; 0xff
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2204      	movs	r2, #4
 8002cba:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e057      	b.n	8002d70 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6812      	ldr	r2, [r2, #0]
 8002cca:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002cce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cd2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6899      	ldr	r1, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68d2      	ldr	r2, [r2, #12]
 8002cfa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6919      	ldr	r1, [r3, #16]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	041a      	lsls	r2, r3, #16
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d1e:	60da      	str	r2, [r3, #12]
#if defined (RTC_CR_BYPSHAD)
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
#endif /* RTC_CR_BYPSHAD */
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f829 	bl	8002d78 <HAL_RTC_WaitForSynchro>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d008      	beq.n	8002d3e <HAL_RTC_Init+0xda>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	22ff      	movs	r2, #255	; 0xff
 8002d32:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2204      	movs	r2, #4
 8002d38:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e018      	b.n	8002d70 <HAL_RTC_Init+0x10c>
      }
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d4c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699a      	ldr	r2, [r3, #24]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	22ff      	movs	r2, #255	; 0xff
 8002d66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
  }
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
#endif /* RTC_CR_BYPSHAD */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d8e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002d90:	f7fe f8da 	bl	8000f48 <HAL_GetTick>
 8002d94:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d96:	e009      	b.n	8002dac <HAL_RTC_WaitForSynchro+0x34>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002d98:	f7fe f8d6 	bl	8000f48 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002da6:	d901      	bls.n	8002dac <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e007      	b.n	8002dbc <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0ee      	beq.n	8002d98 <HAL_RTC_WaitForSynchro+0x20>
      }
    }
  }

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d119      	bne.n	8002e0e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f04f 32ff 	mov.w	r2, #4294967295
 8002de2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002de4:	f7fe f8b0 	bl	8000f48 <HAL_GetTick>
 8002de8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002dea:	e009      	b.n	8002e00 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002dec:	f7fe f8ac 	bl	8000f48 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dfa:	d901      	bls.n	8002e00 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e007      	b.n	8002e10 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0ee      	beq.n	8002dec <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e06e      	b.n	8002f08 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d108      	bne.n	8002e44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e3a:	d009      	beq.n	8002e50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	61da      	str	r2, [r3, #28]
 8002e42:	e005      	b.n	8002e50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d106      	bne.n	8002e70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fd fede 	bl	8000c2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed4:	ea42 0103 	orr.w	r1, r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002edc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	0c1a      	lsrs	r2, r3, #16
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f002 0204 	and.w	r2, r2, #4
 8002ef6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e03f      	b.n	8002fa2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d106      	bne.n	8002f3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fd feec 	bl	8000d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2224      	movs	r2, #36	; 0x24
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f829 	bl	8002fac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	691a      	ldr	r2, [r3, #16]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695a      	ldr	r2, [r3, #20]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002fec:	f023 030c 	bic.w	r3, r3, #12
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6812      	ldr	r2, [r2, #0]
 8002ff4:	68b9      	ldr	r1, [r7, #8]
 8002ff6:	430b      	orrs	r3, r1
 8002ff8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	699a      	ldr	r2, [r3, #24]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a55      	ldr	r2, [pc, #340]	; (800316c <UART_SetConfig+0x1c0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d103      	bne.n	8003022 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800301a:	f7ff fce1 	bl	80029e0 <HAL_RCC_GetPCLK2Freq>
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	e002      	b.n	8003028 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003022:	f7ff fcc9 	bl	80029b8 <HAL_RCC_GetPCLK1Freq>
 8003026:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003030:	d14c      	bne.n	80030cc <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	009a      	lsls	r2, r3, #2
 800303c:	441a      	add	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	fbb2 f3f3 	udiv	r3, r2, r3
 8003048:	4a49      	ldr	r2, [pc, #292]	; (8003170 <UART_SetConfig+0x1c4>)
 800304a:	fba2 2303 	umull	r2, r3, r2, r3
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	0119      	lsls	r1, r3, #4
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	009a      	lsls	r2, r3, #2
 800305c:	441a      	add	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	fbb2 f2f3 	udiv	r2, r2, r3
 8003068:	4b41      	ldr	r3, [pc, #260]	; (8003170 <UART_SetConfig+0x1c4>)
 800306a:	fba3 0302 	umull	r0, r3, r3, r2
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	2064      	movs	r0, #100	; 0x64
 8003072:	fb00 f303 	mul.w	r3, r0, r3
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	3332      	adds	r3, #50	; 0x32
 800307c:	4a3c      	ldr	r2, [pc, #240]	; (8003170 <UART_SetConfig+0x1c4>)
 800307e:	fba2 2303 	umull	r2, r3, r2, r3
 8003082:	095b      	lsrs	r3, r3, #5
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800308a:	4419      	add	r1, r3
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	4613      	mov	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	009a      	lsls	r2, r3, #2
 8003096:	441a      	add	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	fbb2 f2f3 	udiv	r2, r2, r3
 80030a2:	4b33      	ldr	r3, [pc, #204]	; (8003170 <UART_SetConfig+0x1c4>)
 80030a4:	fba3 0302 	umull	r0, r3, r3, r2
 80030a8:	095b      	lsrs	r3, r3, #5
 80030aa:	2064      	movs	r0, #100	; 0x64
 80030ac:	fb00 f303 	mul.w	r3, r0, r3
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	3332      	adds	r3, #50	; 0x32
 80030b6:	4a2e      	ldr	r2, [pc, #184]	; (8003170 <UART_SetConfig+0x1c4>)
 80030b8:	fba2 2303 	umull	r2, r3, r2, r3
 80030bc:	095b      	lsrs	r3, r3, #5
 80030be:	f003 0207 	and.w	r2, r3, #7
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	440a      	add	r2, r1
 80030c8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030ca:	e04a      	b.n	8003162 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	009a      	lsls	r2, r3, #2
 80030d6:	441a      	add	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e2:	4a23      	ldr	r2, [pc, #140]	; (8003170 <UART_SetConfig+0x1c4>)
 80030e4:	fba2 2303 	umull	r2, r3, r2, r3
 80030e8:	095b      	lsrs	r3, r3, #5
 80030ea:	0119      	lsls	r1, r3, #4
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	009a      	lsls	r2, r3, #2
 80030f6:	441a      	add	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003102:	4b1b      	ldr	r3, [pc, #108]	; (8003170 <UART_SetConfig+0x1c4>)
 8003104:	fba3 0302 	umull	r0, r3, r3, r2
 8003108:	095b      	lsrs	r3, r3, #5
 800310a:	2064      	movs	r0, #100	; 0x64
 800310c:	fb00 f303 	mul.w	r3, r0, r3
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	3332      	adds	r3, #50	; 0x32
 8003116:	4a16      	ldr	r2, [pc, #88]	; (8003170 <UART_SetConfig+0x1c4>)
 8003118:	fba2 2303 	umull	r2, r3, r2, r3
 800311c:	095b      	lsrs	r3, r3, #5
 800311e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003122:	4419      	add	r1, r3
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4613      	mov	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4413      	add	r3, r2
 800312c:	009a      	lsls	r2, r3, #2
 800312e:	441a      	add	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	fbb2 f2f3 	udiv	r2, r2, r3
 800313a:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <UART_SetConfig+0x1c4>)
 800313c:	fba3 0302 	umull	r0, r3, r3, r2
 8003140:	095b      	lsrs	r3, r3, #5
 8003142:	2064      	movs	r0, #100	; 0x64
 8003144:	fb00 f303 	mul.w	r3, r0, r3
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	3332      	adds	r3, #50	; 0x32
 800314e:	4a08      	ldr	r2, [pc, #32]	; (8003170 <UART_SetConfig+0x1c4>)
 8003150:	fba2 2303 	umull	r2, r3, r2, r3
 8003154:	095b      	lsrs	r3, r3, #5
 8003156:	f003 020f 	and.w	r2, r3, #15
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	440a      	add	r2, r1
 8003160:	609a      	str	r2, [r3, #8]
}
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40013800 	.word	0x40013800
 8003170:	51eb851f 	.word	0x51eb851f

08003174 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800317c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003180:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	b29b      	uxth	r3, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	b29b      	uxth	r3, r3
 8003192:	4013      	ands	r3, r2
 8003194:	b29a      	uxth	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr

080031a8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80031a8:	b084      	sub	sp, #16
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
 80031b2:	f107 0014 	add.w	r0, r7, #20
 80031b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	b004      	add	sp, #16
 80031e6:	4770      	bx	lr

080031e8 <__libc_init_array>:
 80031e8:	b570      	push	{r4, r5, r6, lr}
 80031ea:	2600      	movs	r6, #0
 80031ec:	4d0c      	ldr	r5, [pc, #48]	; (8003220 <__libc_init_array+0x38>)
 80031ee:	4c0d      	ldr	r4, [pc, #52]	; (8003224 <__libc_init_array+0x3c>)
 80031f0:	1b64      	subs	r4, r4, r5
 80031f2:	10a4      	asrs	r4, r4, #2
 80031f4:	42a6      	cmp	r6, r4
 80031f6:	d109      	bne.n	800320c <__libc_init_array+0x24>
 80031f8:	f000 f822 	bl	8003240 <_init>
 80031fc:	2600      	movs	r6, #0
 80031fe:	4d0a      	ldr	r5, [pc, #40]	; (8003228 <__libc_init_array+0x40>)
 8003200:	4c0a      	ldr	r4, [pc, #40]	; (800322c <__libc_init_array+0x44>)
 8003202:	1b64      	subs	r4, r4, r5
 8003204:	10a4      	asrs	r4, r4, #2
 8003206:	42a6      	cmp	r6, r4
 8003208:	d105      	bne.n	8003216 <__libc_init_array+0x2e>
 800320a:	bd70      	pop	{r4, r5, r6, pc}
 800320c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003210:	4798      	blx	r3
 8003212:	3601      	adds	r6, #1
 8003214:	e7ee      	b.n	80031f4 <__libc_init_array+0xc>
 8003216:	f855 3b04 	ldr.w	r3, [r5], #4
 800321a:	4798      	blx	r3
 800321c:	3601      	adds	r6, #1
 800321e:	e7f2      	b.n	8003206 <__libc_init_array+0x1e>
 8003220:	08003284 	.word	0x08003284
 8003224:	08003284 	.word	0x08003284
 8003228:	08003284 	.word	0x08003284
 800322c:	08003288 	.word	0x08003288

08003230 <memset>:
 8003230:	4603      	mov	r3, r0
 8003232:	4402      	add	r2, r0
 8003234:	4293      	cmp	r3, r2
 8003236:	d100      	bne.n	800323a <memset+0xa>
 8003238:	4770      	bx	lr
 800323a:	f803 1b01 	strb.w	r1, [r3], #1
 800323e:	e7f9      	b.n	8003234 <memset+0x4>

08003240 <_init>:
 8003240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003242:	bf00      	nop
 8003244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003246:	bc08      	pop	{r3}
 8003248:	469e      	mov	lr, r3
 800324a:	4770      	bx	lr

0800324c <_fini>:
 800324c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324e:	bf00      	nop
 8003250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003252:	bc08      	pop	{r3}
 8003254:	469e      	mov	lr, r3
 8003256:	4770      	bx	lr
